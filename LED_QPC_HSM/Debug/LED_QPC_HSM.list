
LED_QPC_HSM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002590  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800273c  0800273c  0001273c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027c4  080027c4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080027c4  080027c4  000127c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080027cc  080027cc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027cc  080027cc  000127cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027d0  080027d0  000127d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080027d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000168  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000174  20000174  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000923f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c07  00000000  00000000  0002927b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000750  00000000  00000000  0002be88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000610  00000000  00000000  0002c5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002296b  00000000  00000000  0002cbe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000097b6  00000000  00000000  0004f553  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdf82  00000000  00000000  00058d09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00126c8b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001880  00000000  00000000  00126cdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002724 	.word	0x08002724

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08002724 	.word	0x08002724

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b590      	push	{r4, r7, lr}
 80004f2:	b085      	sub	sp, #20
 80004f4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f6:	f001 f967 	bl	80017c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fa:	f000 f82f 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fe:	f000 f899 	bl	8000634 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  static QEvt const *l_blinkyQSto[10]; /* Event queue storage for Blinky */

  QF_init();  /* initialize the framework and the underlying RT kernel */
 8000502:	f001 f877 	bl	80015f4 <QF_init>
  BSP_init(); /* initialize the Board Support Package */
 8000506:	f000 fa65 	bl	80009d4 <BSP_init>

  /* publish-subscribe not used, no call to QF_psInit() */
  /* dynamic event allocation not used, no call to QF_poolInit() */

  /* instantiate and start the active objects... */
  Blinky_ctor();
 800050a:	f000 f961 	bl	80007d0 <Blinky_ctor>
  QACTIVE_START(AO_Blinky,      /* AO pointer to start */
 800050e:	4b10      	ldr	r3, [pc, #64]	; (8000550 <main+0x60>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d103      	bne.n	8000520 <main+0x30>
 8000518:	2164      	movs	r1, #100	; 0x64
 800051a:	480e      	ldr	r0, [pc, #56]	; (8000554 <main+0x64>)
 800051c:	f000 faaa 	bl	8000a74 <Q_onAssert>
 8000520:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <main+0x60>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	689c      	ldr	r4, [r3, #8]
 8000528:	4b09      	ldr	r3, [pc, #36]	; (8000550 <main+0x60>)
 800052a:	6818      	ldr	r0, [r3, #0]
 800052c:	2300      	movs	r3, #0
 800052e:	9302      	str	r3, [sp, #8]
 8000530:	2300      	movs	r3, #0
 8000532:	9301      	str	r3, [sp, #4]
 8000534:	2300      	movs	r3, #0
 8000536:	9300      	str	r3, [sp, #0]
 8000538:	230a      	movs	r3, #10
 800053a:	4a07      	ldr	r2, [pc, #28]	; (8000558 <main+0x68>)
 800053c:	2101      	movs	r1, #1
 800053e:	47a0      	blx	r4
                Q_DIM(l_blinkyQSto), /* lenght of the queue [entries] */
                (void *)0,      /* stack storage (not used in QK) */
                0U,             /* stack size [bytes] (not used in QK) */
                (QEvt *)0);     /* initial event (or 0) */

  return QF_run(); /* run the QF application */
 8000540:	f001 f880 	bl	8001644 <QF_run>
 8000544:	4603      	mov	r3, r0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//  }
  /* USER CODE END 3 */
}
 8000546:	4618      	mov	r0, r3
 8000548:	3704      	adds	r7, #4
 800054a:	46bd      	mov	sp, r7
 800054c:	bd90      	pop	{r4, r7, pc}
 800054e:	bf00      	nop
 8000550:	08002760 	.word	0x08002760
 8000554:	0800273c 	.word	0x0800273c
 8000558:	20000028 	.word	0x20000028

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b094      	sub	sp, #80	; 0x50
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 0320 	add.w	r3, r7, #32
 8000566:	2230      	movs	r2, #48	; 0x30
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f002 f8d2 	bl	8002714 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	f107 030c 	add.w	r3, r7, #12
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000580:	2300      	movs	r3, #0
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	4b29      	ldr	r3, [pc, #164]	; (800062c <SystemClock_Config+0xd0>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000588:	4a28      	ldr	r2, [pc, #160]	; (800062c <SystemClock_Config+0xd0>)
 800058a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058e:	6413      	str	r3, [r2, #64]	; 0x40
 8000590:	4b26      	ldr	r3, [pc, #152]	; (800062c <SystemClock_Config+0xd0>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800059c:	2300      	movs	r3, #0
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	4b23      	ldr	r3, [pc, #140]	; (8000630 <SystemClock_Config+0xd4>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005a8:	4a21      	ldr	r2, [pc, #132]	; (8000630 <SystemClock_Config+0xd4>)
 80005aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ae:	6013      	str	r3, [r2, #0]
 80005b0:	4b1f      	ldr	r3, [pc, #124]	; (8000630 <SystemClock_Config+0xd4>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005bc:	2302      	movs	r3, #2
 80005be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c0:	2301      	movs	r3, #1
 80005c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c4:	2310      	movs	r3, #16
 80005c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c8:	2302      	movs	r3, #2
 80005ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005cc:	2300      	movs	r3, #0
 80005ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005d0:	2308      	movs	r3, #8
 80005d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80005d4:	2332      	movs	r3, #50	; 0x32
 80005d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005d8:	2304      	movs	r3, #4
 80005da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005dc:	2307      	movs	r3, #7
 80005de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e0:	f107 0320 	add.w	r3, r7, #32
 80005e4:	4618      	mov	r0, r3
 80005e6:	f001 fc0d 	bl	8001e04 <HAL_RCC_OscConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005f0:	f000 f854 	bl	800069c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f4:	230f      	movs	r3, #15
 80005f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f8:	2302      	movs	r3, #2
 80005fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000600:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000604:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000606:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800060a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f001 fe6e 	bl	80022f4 <HAL_RCC_ClockConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800061e:	f000 f83d 	bl	800069c <Error_Handler>
  }
}
 8000622:	bf00      	nop
 8000624:	3750      	adds	r7, #80	; 0x50
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40023800 	.word	0x40023800
 8000630:	40007000 	.word	0x40007000

08000634 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000648:	2300      	movs	r3, #0
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	4b11      	ldr	r3, [pc, #68]	; (8000694 <MX_GPIO_Init+0x60>)
 800064e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000650:	4a10      	ldr	r2, [pc, #64]	; (8000694 <MX_GPIO_Init+0x60>)
 8000652:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000656:	6313      	str	r3, [r2, #48]	; 0x30
 8000658:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <MX_GPIO_Init+0x60>)
 800065a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000660:	603b      	str	r3, [r7, #0]
 8000662:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GREEN_LED_Pin|RED_LED_Pin, GPIO_PIN_RESET);
 8000664:	2200      	movs	r2, #0
 8000666:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800066a:	480b      	ldr	r0, [pc, #44]	; (8000698 <MX_GPIO_Init+0x64>)
 800066c:	f001 fbb0 	bl	8001dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GREEN_LED_Pin RED_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin;
 8000670:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000674:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000676:	2301      	movs	r3, #1
 8000678:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067e:	2300      	movs	r3, #0
 8000680:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	4619      	mov	r1, r3
 8000686:	4804      	ldr	r0, [pc, #16]	; (8000698 <MX_GPIO_Init+0x64>)
 8000688:	f001 f9f6 	bl	8001a78 <HAL_GPIO_Init>

}
 800068c:	bf00      	nop
 800068e:	3718      	adds	r7, #24
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40023800 	.word	0x40023800
 8000698:	40021800 	.word	0x40021800

0800069c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a0:	b672      	cpsid	i
}
 80006a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <Error_Handler+0x8>
	...

080006a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <HAL_MspInit+0x4c>)
 80006b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b6:	4a0f      	ldr	r2, [pc, #60]	; (80006f4 <HAL_MspInit+0x4c>)
 80006b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006bc:	6453      	str	r3, [r2, #68]	; 0x44
 80006be:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <HAL_MspInit+0x4c>)
 80006c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	603b      	str	r3, [r7, #0]
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <HAL_MspInit+0x4c>)
 80006d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d2:	4a08      	ldr	r2, [pc, #32]	; (80006f4 <HAL_MspInit+0x4c>)
 80006d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d8:	6413      	str	r3, [r2, #64]	; 0x40
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <HAL_MspInit+0x4c>)
 80006dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e2:	603b      	str	r3, [r7, #0]
 80006e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80006e6:	2007      	movs	r0, #7
 80006e8:	f001 f992 	bl	8001a10 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40023800 	.word	0x40023800

080006f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006fc:	e7fe      	b.n	80006fc <NMI_Handler+0x4>

080006fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006fe:	b480      	push	{r7}
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000702:	e7fe      	b.n	8000702 <HardFault_Handler+0x4>

08000704 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000708:	e7fe      	b.n	8000708 <MemManage_Handler+0x4>

0800070a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800070a:	b480      	push	{r7}
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800070e:	e7fe      	b.n	800070e <BusFault_Handler+0x4>

08000710 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000714:	e7fe      	b.n	8000714 <UsageFault_Handler+0x4>

08000716 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800071a:	bf00      	nop
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr

08000724 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr

08000732 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000736:	bf00      	nop
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	QF_TICK_X(0U, (void *)0); /* process time events for rate 0 */
 8000744:	2000      	movs	r0, #0
 8000746:	f000 fe31 	bl	80013ac <QF_tickX_>
	QV_ARM_ERRATUM_838869();
 800074a:	f3bf 8f4f 	dsb	sy
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800074e:	f001 f88d 	bl	800186c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
	...

08000758 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <SystemInit+0x20>)
 800075e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000762:	4a05      	ldr	r2, [pc, #20]	; (8000778 <SystemInit+0x20>)
 8000764:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000768:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	e000ed00 	.word	0xe000ed00

0800077c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800077c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007b4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000780:	480d      	ldr	r0, [pc, #52]	; (80007b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000782:	490e      	ldr	r1, [pc, #56]	; (80007bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000784:	4a0e      	ldr	r2, [pc, #56]	; (80007c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000786:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000788:	e002      	b.n	8000790 <LoopCopyDataInit>

0800078a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800078a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800078c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800078e:	3304      	adds	r3, #4

08000790 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000790:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000792:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000794:	d3f9      	bcc.n	800078a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000796:	4a0b      	ldr	r2, [pc, #44]	; (80007c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000798:	4c0b      	ldr	r4, [pc, #44]	; (80007c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800079a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800079c:	e001      	b.n	80007a2 <LoopFillZerobss>

0800079e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800079e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007a0:	3204      	adds	r2, #4

080007a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007a4:	d3fb      	bcc.n	800079e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80007a6:	f7ff ffd7 	bl	8000758 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007aa:	f001 ff8f 	bl	80026cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007ae:	f7ff fe9f 	bl	80004f0 <main>
  bx  lr    
 80007b2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80007b4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80007b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007c0:	080027d4 	.word	0x080027d4
  ldr r2, =_sbss
 80007c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007c8:	20000174 	.word	0x20000174

080007cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007cc:	e7fe      	b.n	80007cc <ADC_IRQHandler>
	...

080007d0 <Blinky_ctor>:
static QState Blinky_initial(Blinky * const me, QEvt const * const e);
static QState Blinky_off    (Blinky * const me, QEvt const * const e);
static QState Blinky_on     (Blinky * const me, QEvt const * const e);

/*..........................................................................*/
void Blinky_ctor(void) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
    Blinky * const me = &l_blinky;
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <Blinky_ctor+0x2c>)
 80007d8:	607b      	str	r3, [r7, #4]
    QActive_ctor(&me->super, Q_STATE_CAST(&Blinky_initial));
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4908      	ldr	r1, [pc, #32]	; (8000800 <Blinky_ctor+0x30>)
 80007de:	4618      	mov	r0, r3
 80007e0:	f000 fda2 	bl	8001328 <QActive_ctor>
    QTimeEvt_ctorX(&me->timeEvt, &me->super, TIMEOUT_SIG, 0U);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	f103 0020 	add.w	r0, r3, #32
 80007ea:	6879      	ldr	r1, [r7, #4]
 80007ec:	2300      	movs	r3, #0
 80007ee:	2206      	movs	r2, #6
 80007f0:	f000 fe76 	bl	80014e0 <QTimeEvt_ctorX>
}
 80007f4:	bf00      	nop
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000050 	.word	0x20000050
 8000800:	08000805 	.word	0x08000805

08000804 <Blinky_initial>:

/* HSM definition ----------------------------------------------------------*/
QState Blinky_initial(Blinky * const me, QEvt const * const e) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	6039      	str	r1, [r7, #0]
    (void)e; /* avoid compiler warning about unused parameter */

    /* arm the time event to expire in half a second and every half second */
    QTimeEvt_armX(&me->timeEvt, BSP_TICKS_PER_SEC/2U, BSP_TICKS_PER_SEC/2U);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	3320      	adds	r3, #32
 8000812:	2232      	movs	r2, #50	; 0x32
 8000814:	2132      	movs	r1, #50	; 0x32
 8000816:	4618      	mov	r0, r3
 8000818:	f000 fe92 	bl	8001540 <QTimeEvt_armX>
    return Q_TRAN(&Blinky_off);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	4a03      	ldr	r2, [pc, #12]	; (800082c <Blinky_initial+0x28>)
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	2308      	movs	r3, #8
}
 8000824:	4618      	mov	r0, r3
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	08000831 	.word	0x08000831

08000830 <Blinky_off>:
/*..........................................................................*/
QState Blinky_off(Blinky * const me, QEvt const * const e) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
    QState status;
    switch (e->sig) {
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	881b      	ldrh	r3, [r3, #0]
 800083e:	2b01      	cmp	r3, #1
 8000840:	d002      	beq.n	8000848 <Blinky_off+0x18>
 8000842:	2b06      	cmp	r3, #6
 8000844:	d005      	beq.n	8000852 <Blinky_off+0x22>
 8000846:	e00a      	b.n	800085e <Blinky_off+0x2e>
        case Q_ENTRY_SIG: {
            BSP_ledOff();
 8000848:	f000 f8cc 	bl	80009e4 <BSP_ledOff>
            status = Q_HANDLED();
 800084c:	2303      	movs	r3, #3
 800084e:	60fb      	str	r3, [r7, #12]
            break;
 8000850:	e00b      	b.n	800086a <Blinky_off+0x3a>
        }
        case TIMEOUT_SIG: {
            status = Q_TRAN(&Blinky_on);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	4a07      	ldr	r2, [pc, #28]	; (8000874 <Blinky_off+0x44>)
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	2308      	movs	r3, #8
 800085a:	60fb      	str	r3, [r7, #12]
            break;
 800085c:	e005      	b.n	800086a <Blinky_off+0x3a>
        }
        default: {
            status = Q_SUPER(&QHsm_top);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4a05      	ldr	r2, [pc, #20]	; (8000878 <Blinky_off+0x48>)
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	2300      	movs	r3, #0
 8000866:	60fb      	str	r3, [r7, #12]
            break;
 8000868:	bf00      	nop
        }
    }
    return status;
 800086a:	68fb      	ldr	r3, [r7, #12]
}
 800086c:	4618      	mov	r0, r3
 800086e:	3710      	adds	r7, #16
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	0800087d 	.word	0x0800087d
 8000878:	08000bad 	.word	0x08000bad

0800087c <Blinky_on>:
/*..........................................................................*/
QState Blinky_on(Blinky * const me, QEvt const * const e) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	6039      	str	r1, [r7, #0]
    QState status;
    switch (e->sig) {
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	881b      	ldrh	r3, [r3, #0]
 800088a:	2b01      	cmp	r3, #1
 800088c:	d002      	beq.n	8000894 <Blinky_on+0x18>
 800088e:	2b06      	cmp	r3, #6
 8000890:	d005      	beq.n	800089e <Blinky_on+0x22>
 8000892:	e00a      	b.n	80008aa <Blinky_on+0x2e>
        case Q_ENTRY_SIG: {
            BSP_ledOn();
 8000894:	f000 f8b8 	bl	8000a08 <BSP_ledOn>
            status = Q_HANDLED();
 8000898:	2303      	movs	r3, #3
 800089a:	60fb      	str	r3, [r7, #12]
            break;
 800089c:	e00b      	b.n	80008b6 <Blinky_on+0x3a>
        }
        case TIMEOUT_SIG: {
            status = Q_TRAN(&Blinky_off);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4a07      	ldr	r2, [pc, #28]	; (80008c0 <Blinky_on+0x44>)
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	2308      	movs	r3, #8
 80008a6:	60fb      	str	r3, [r7, #12]
            break;
 80008a8:	e005      	b.n	80008b6 <Blinky_on+0x3a>
        }
        default: {
            status = Q_SUPER(&QHsm_top);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	4a05      	ldr	r2, [pc, #20]	; (80008c4 <Blinky_on+0x48>)
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
            break;
 80008b4:	bf00      	nop
        }
    }
    return status;
 80008b6:	68fb      	ldr	r3, [r7, #12]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3710      	adds	r7, #16
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	08000831 	.word	0x08000831
 80008c4:	08000bad 	.word	0x08000bad

080008c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	f003 0307 	and.w	r3, r3, #7
 80008d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <__NVIC_SetPriorityGrouping+0x44>)
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008de:	68ba      	ldr	r2, [r7, #8]
 80008e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008e4:	4013      	ands	r3, r2
 80008e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008fa:	4a04      	ldr	r2, [pc, #16]	; (800090c <__NVIC_SetPriorityGrouping+0x44>)
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	60d3      	str	r3, [r2, #12]
}
 8000900:	bf00      	nop
 8000902:	3714      	adds	r7, #20
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	6039      	str	r1, [r7, #0]
 800091a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800091c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000920:	2b00      	cmp	r3, #0
 8000922:	db0a      	blt.n	800093a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	b2da      	uxtb	r2, r3
 8000928:	490c      	ldr	r1, [pc, #48]	; (800095c <__NVIC_SetPriority+0x4c>)
 800092a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092e:	0112      	lsls	r2, r2, #4
 8000930:	b2d2      	uxtb	r2, r2
 8000932:	440b      	add	r3, r1
 8000934:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000938:	e00a      	b.n	8000950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	b2da      	uxtb	r2, r3
 800093e:	4908      	ldr	r1, [pc, #32]	; (8000960 <__NVIC_SetPriority+0x50>)
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	f003 030f 	and.w	r3, r3, #15
 8000946:	3b04      	subs	r3, #4
 8000948:	0112      	lsls	r2, r2, #4
 800094a:	b2d2      	uxtb	r2, r2
 800094c:	440b      	add	r3, r1
 800094e:	761a      	strb	r2, [r3, #24]
}
 8000950:	bf00      	nop
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	e000e100 	.word	0xe000e100
 8000960:	e000ed00 	.word	0xe000ed00

08000964 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000968:	f3bf 8f4f 	dsb	sy
}
 800096c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800096e:	4b06      	ldr	r3, [pc, #24]	; (8000988 <__NVIC_SystemReset+0x24>)
 8000970:	68db      	ldr	r3, [r3, #12]
 8000972:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000976:	4904      	ldr	r1, [pc, #16]	; (8000988 <__NVIC_SystemReset+0x24>)
 8000978:	4b04      	ldr	r3, [pc, #16]	; (800098c <__NVIC_SystemReset+0x28>)
 800097a:	4313      	orrs	r3, r2
 800097c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800097e:	f3bf 8f4f 	dsb	sy
}
 8000982:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <__NVIC_SystemReset+0x20>
 8000988:	e000ed00 	.word	0xe000ed00
 800098c:	05fa0004 	.word	0x05fa0004

08000990 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	3b01      	subs	r3, #1
 800099c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009a0:	d301      	bcc.n	80009a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009a2:	2301      	movs	r3, #1
 80009a4:	e00f      	b.n	80009c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009a6:	4a0a      	ldr	r2, [pc, #40]	; (80009d0 <SysTick_Config+0x40>)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3b01      	subs	r3, #1
 80009ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ae:	210f      	movs	r1, #15
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	f7ff ffac 	bl	8000910 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009b8:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <SysTick_Config+0x40>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009be:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <SysTick_Config+0x40>)
 80009c0:	2207      	movs	r2, #7
 80009c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009c4:	2300      	movs	r3, #0
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	e000e010 	.word	0xe000e010

080009d4 <BSP_init>:


/* ISRs used in this project ===============================================*/

/* BSP functions ===========================================================*/
void BSP_init(void) {
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0

}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
	...

080009e4 <BSP_ledOff>:
/*..........................................................................*/
void BSP_ledOff(void) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 80009e8:	2200      	movs	r2, #0
 80009ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ee:	4805      	ldr	r0, [pc, #20]	; (8000a04 <BSP_ledOff+0x20>)
 80009f0:	f001 f9ee 	bl	8001dd0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 80009f4:	2201      	movs	r2, #1
 80009f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009fa:	4802      	ldr	r0, [pc, #8]	; (8000a04 <BSP_ledOff+0x20>)
 80009fc:	f001 f9e8 	bl	8001dd0 <HAL_GPIO_WritePin>
}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40021800 	.word	0x40021800

08000a08 <BSP_ledOn>:
/*..........................................................................*/
void BSP_ledOn(void) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a12:	4805      	ldr	r0, [pc, #20]	; (8000a28 <BSP_ledOn+0x20>)
 8000a14:	f001 f9dc 	bl	8001dd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a1e:	4802      	ldr	r0, [pc, #8]	; (8000a28 <BSP_ledOn+0x20>)
 8000a20:	f001 f9d6 	bl	8001dd0 <HAL_GPIO_WritePin>
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40021800 	.word	0x40021800

08000a2c <QF_onStartup>:


/* QF callbacks ============================================================*/
void QF_onStartup(void) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
    /* set up the SysTick timer to fire at BSP_TICKS_PER_SEC rate */
    SysTick_Config(SystemCoreClock / BSP_TICKS_PER_SEC);
 8000a30:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <QF_onStartup+0x2c>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a09      	ldr	r2, [pc, #36]	; (8000a5c <QF_onStartup+0x30>)
 8000a36:	fba2 2303 	umull	r2, r3, r2, r3
 8000a3a:	095b      	lsrs	r3, r3, #5
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff ffa7 	bl	8000990 <SysTick_Config>

    /* assing all priority bits for preemption-prio. and none to sub-prio. */
    NVIC_SetPriorityGrouping(0U);
 8000a42:	2000      	movs	r0, #0
 8000a44:	f7ff ff40 	bl	80008c8 <__NVIC_SetPriorityGrouping>
    *
    * !!!!!!!!!!!!!!!!!!!!!!!!!!!! CAUTION !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    * Assign a priority to EVERY ISR explicitly by calling NVIC_SetPriority().
    * DO NOT LEAVE THE ISR PRIORITIES AT THE DEFAULT VALUE!
    */
    NVIC_SetPriority(SysTick_IRQn,   QF_AWARE_ISR_CMSIS_PRI);
 8000a48:	2103      	movs	r1, #3
 8000a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8000a4e:	f7ff ff5f 	bl	8000910 <__NVIC_SetPriority>
    /* ... */

    /* enable IRQs... */
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000000 	.word	0x20000000
 8000a5c:	51eb851f 	.word	0x51eb851f

08000a60 <QV_onIdle>:
/*..........................................................................*/
void QF_onCleanup(void) {
}
/*..........................................................................*/
void QV_onIdle(void) { /* CATION: called with interrupts DISABLED, NOTE2 */
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
    * you might need to customize the clock management for your application,
    * see the datasheet for your particular Cortex-M MCU.
    */
    QV_CPU_SLEEP();  /* atomically go to sleep and enable interrupts */
#else
    QF_INT_ENABLE(); /* just enable interrupts */
 8000a64:	2300      	movs	r3, #0
 8000a66:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <Q_onAssert>:

/*..........................................................................*/
Q_NORETURN Q_onAssert(char_t const * const module, int_t const loc) {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	6039      	str	r1, [r7, #0]
    * NOTE: add here your application-specific error handling
    */
    (void)module;
    (void)loc;
    QS_ASSERTION(module, loc, 10000U); /* report assertion to QS */
    NVIC_SystemReset();
 8000a7e:	f7ff ff71 	bl	8000964 <__NVIC_SystemReset>
	...

08000a84 <QHsm_ctor>:
* @usage
* The following example illustrates how to invoke QHsm_ctor() in the
* "constructor" of a derived state machine:
* @include qep_qhsm_ctor.c
*/
void QHsm_ctor(QHsm * const me, QStateHandler initial) {
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	6039      	str	r1, [r7, #0]
        &QHsm_dispatch_
#ifdef Q_SPY
        ,&QHsm_getStateHandler_
#endif
    };
    me->vptr      = &vtable;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4a06      	ldr	r2, [pc, #24]	; (8000aac <QHsm_ctor+0x28>)
 8000a92:	601a      	str	r2, [r3, #0]
    me->state.fun = Q_STATE_CAST(&QHsm_top);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4a06      	ldr	r2, [pc, #24]	; (8000ab0 <QHsm_ctor+0x2c>)
 8000a98:	605a      	str	r2, [r3, #4]
    me->temp.fun  = initial;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	683a      	ldr	r2, [r7, #0]
 8000a9e:	609a      	str	r2, [r3, #8]
}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	0800277c 	.word	0x0800277c
 8000ab0:	08000bad 	.word	0x08000bad

08000ab4 <QHsm_init_>:
void QHsm_init_(QHsm * const me, void const * const e,
                uint_fast8_t const qs_id)
#else
void QHsm_init_(QHsm * const me, void const * const e)
#endif
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08c      	sub	sp, #48	; 0x30
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	6039      	str	r1, [r7, #0]
    QStateHandler t = me->state.fun;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c

    /** @pre the virtual pointer must be initialized, the top-most initial
    * transition must be initialized, and the initial transition must not
    * be taken yet.
    */
    Q_REQUIRE_ID(200, (me->vptr != (struct QHsmVtable *)0)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d007      	beq.n	8000adc <QHsm_init_+0x28>
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	689b      	ldr	r3, [r3, #8]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d003      	beq.n	8000adc <QHsm_init_+0x28>
 8000ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ad6:	4a30      	ldr	r2, [pc, #192]	; (8000b98 <QHsm_init_+0xe4>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d003      	beq.n	8000ae4 <QHsm_init_+0x30>
 8000adc:	21c8      	movs	r1, #200	; 0xc8
 8000ade:	482f      	ldr	r0, [pc, #188]	; (8000b9c <QHsm_init_+0xe8>)
 8000ae0:	f7ff ffc8 	bl	8000a74 <Q_onAssert>
                      && (me->temp.fun != Q_STATE_CAST(0))
                      && (t == Q_STATE_CAST(&QHsm_top)));

    /* execute the top-most initial tran. */
    r = (*me->temp.fun)(me, Q_EVT_CAST(QEvt));
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	689b      	ldr	r3, [r3, #8]
 8000ae8:	6839      	ldr	r1, [r7, #0]
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	4798      	blx	r3
 8000aee:	6278      	str	r0, [r7, #36]	; 0x24

    /* the top-most initial transition must be taken */
    Q_ASSERT_ID(210, r == (QState)Q_RET_TRAN);
 8000af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af2:	2b08      	cmp	r3, #8
 8000af4:	d003      	beq.n	8000afe <QHsm_init_+0x4a>
 8000af6:	21d2      	movs	r1, #210	; 0xd2
 8000af8:	4828      	ldr	r0, [pc, #160]	; (8000b9c <QHsm_init_+0xe8>)
 8000afa:	f7ff ffbb 	bl	8000a74 <Q_onAssert>
    QS_END_PRE_()

    /* drill down into the state hierarchy with initial transitions... */
    do {
        QStateHandler path[QHSM_MAX_NEST_DEPTH_]; /* tran entry path array */
        int_fast8_t ip = 0; /* tran entry path index */
 8000afe:	2300      	movs	r3, #0
 8000b00:	62bb      	str	r3, [r7, #40]	; 0x28

        path[0] = me->temp.fun;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	689b      	ldr	r3, [r3, #8]
 8000b06:	60fb      	str	r3, [r7, #12]
        (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	689b      	ldr	r3, [r3, #8]
 8000b0c:	4924      	ldr	r1, [pc, #144]	; (8000ba0 <QHsm_init_+0xec>)
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	4798      	blx	r3
        while (me->temp.fun != t) {
 8000b12:	e016      	b.n	8000b42 <QHsm_init_+0x8e>
            ++ip;
 8000b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b16:	3301      	adds	r3, #1
 8000b18:	62bb      	str	r3, [r7, #40]	; 0x28
            Q_ASSERT_ID(220, ip < (int_fast8_t)Q_DIM(path));
 8000b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b1c:	2b05      	cmp	r3, #5
 8000b1e:	dd03      	ble.n	8000b28 <QHsm_init_+0x74>
 8000b20:	21dc      	movs	r1, #220	; 0xdc
 8000b22:	481e      	ldr	r0, [pc, #120]	; (8000b9c <QHsm_init_+0xe8>)
 8000b24:	f7ff ffa6 	bl	8000a74 <Q_onAssert>
            path[ip] = me->temp.fun;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	689a      	ldr	r2, [r3, #8]
 8000b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	3330      	adds	r3, #48	; 0x30
 8000b32:	443b      	add	r3, r7
 8000b34:	f843 2c24 	str.w	r2, [r3, #-36]
            (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	4918      	ldr	r1, [pc, #96]	; (8000ba0 <QHsm_init_+0xec>)
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	4798      	blx	r3
        while (me->temp.fun != t) {
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	689b      	ldr	r3, [r3, #8]
 8000b46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d1e3      	bne.n	8000b14 <QHsm_init_+0x60>
        }
        me->temp.fun = path[0];
 8000b4c:	68fa      	ldr	r2, [r7, #12]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	609a      	str	r2, [r3, #8]

        /* retrace the entry path in reverse (desired) order... */
        do {
            QEP_ENTER_(path[ip], qs_id); /* enter path[ip] */
 8000b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	3330      	adds	r3, #48	; 0x30
 8000b58:	443b      	add	r3, r7
 8000b5a:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8000b5e:	4911      	ldr	r1, [pc, #68]	; (8000ba4 <QHsm_init_+0xf0>)
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	4798      	blx	r3
            --ip;
 8000b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b66:	3b01      	subs	r3, #1
 8000b68:	62bb      	str	r3, [r7, #40]	; 0x28
        } while (ip >= 0);
 8000b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	daf0      	bge.n	8000b52 <QHsm_init_+0x9e>

        t = path[0]; /* current state becomes the new source */
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	62fb      	str	r3, [r7, #44]	; 0x2c

        r = QEP_TRIG_(t, Q_INIT_SIG); /* execute initial transition */
 8000b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b76:	490c      	ldr	r1, [pc, #48]	; (8000ba8 <QHsm_init_+0xf4>)
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	4798      	blx	r3
 8000b7c:	6278      	str	r0, [r7, #36]	; 0x24
                QS_FUN_PRE_(me->temp.fun); /* target of the initial tran. */
            QS_END_PRE_()
        }
#endif /* Q_SPY */

    } while (r == (QState)Q_RET_TRAN);
 8000b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b80:	2b08      	cmp	r3, #8
 8000b82:	d0bc      	beq.n	8000afe <QHsm_init_+0x4a>
        QS_TIME_PRE_();    /* time stamp */
        QS_OBJ_PRE_(me);   /* this state machine object */
        QS_FUN_PRE_(t);    /* the new active state */
    QS_END_PRE_()

    me->state.fun = t; /* change the current active state */
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b88:	605a      	str	r2, [r3, #4]
    me->temp.fun  = t; /* mark the configuration as stable */
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b8e:	609a      	str	r2, [r3, #8]
}
 8000b90:	bf00      	nop
 8000b92:	3730      	adds	r7, #48	; 0x30
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	08000bad 	.word	0x08000bad
 8000b9c:	08002764 	.word	0x08002764
 8000ba0:	0800276c 	.word	0x0800276c
 8000ba4:	08002770 	.word	0x08002770
 8000ba8:	08002778 	.word	0x08002778

08000bac <QHsm_top>:
*          ignores all events.
*
* @note The parameters to this state handler are not used. They are provided
* for conformance with the state-handler function signature ::QStateHandler.
*/
QState QHsm_top(void const * const me, QEvt const * const e) {
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
    (void)me; /* suppress the "unused parameter" compiler warning */
    (void)e;  /* suppress the "unused parameter" compiler warning */
    return (QState)Q_RET_IGNORED; /* the top state ignores all events */
 8000bb6:	2304      	movs	r3, #4
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <QHsm_dispatch_>:
void QHsm_dispatch_(QHsm * const me, QEvt const * const e,
                    uint_fast8_t const qs_id)
#else
void QHsm_dispatch_(QHsm * const me, QEvt const * const e)
#endif
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08c      	sub	sp, #48	; 0x30
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	6039      	str	r1, [r7, #0]
    QStateHandler t = me->state.fun;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    QS_CRIT_STAT_

    /** @pre the current state must be initialized and
    * the state configuration must be stable
    */
    Q_REQUIRE_ID(400, (t != Q_STATE_CAST(0))
 8000bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d004      	beq.n	8000be4 <QHsm_dispatch_+0x20>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	689b      	ldr	r3, [r3, #8]
 8000bde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d004      	beq.n	8000bee <QHsm_dispatch_+0x2a>
 8000be4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000be8:	484e      	ldr	r0, [pc, #312]	; (8000d24 <QHsm_dispatch_+0x160>)
 8000bea:	f7ff ff43 	bl	8000a74 <Q_onAssert>
        QS_FUN_PRE_(t);         /* the current state */
    QS_END_PRE_()

    /* process the event hierarchically... */
    do {
        s = me->temp.fun;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	689b      	ldr	r3, [r3, #8]
 8000bf2:	623b      	str	r3, [r7, #32]
        r = (*s)(me, e); /* invoke state handler s */
 8000bf4:	6a3b      	ldr	r3, [r7, #32]
 8000bf6:	6839      	ldr	r1, [r7, #0]
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	4798      	blx	r3
 8000bfc:	62b8      	str	r0, [r7, #40]	; 0x28

        if (r == (QState)Q_RET_UNHANDLED) { /* unhandled due to a guard? */
 8000bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c00:	2b02      	cmp	r3, #2
 8000c02:	d104      	bne.n	8000c0e <QHsm_dispatch_+0x4a>
                QS_SIG_PRE_(e->sig); /* the signal of the event */
                QS_OBJ_PRE_(me);     /* this state machine object */
                QS_FUN_PRE_(s);      /* the current state */
            QS_END_PRE_()

            r = QEP_TRIG_(s, QEP_EMPTY_SIG_); /* find superstate of s */
 8000c04:	6a3b      	ldr	r3, [r7, #32]
 8000c06:	4948      	ldr	r1, [pc, #288]	; (8000d28 <QHsm_dispatch_+0x164>)
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	4798      	blx	r3
 8000c0c:	62b8      	str	r0, [r7, #40]	; 0x28
        }
    } while (r == (QState)Q_RET_SUPER);
 8000c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d0ec      	beq.n	8000bee <QHsm_dispatch_+0x2a>

    /* transition taken? */
    if (r >= (QState)Q_RET_TRAN) {
 8000c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c16:	2b07      	cmp	r3, #7
 8000c18:	d979      	bls.n	8000d0e <QHsm_dispatch_+0x14a>
        QStateHandler path[QHSM_MAX_NEST_DEPTH_];
        int_fast8_t ip;

        path[0] = me->temp.fun; /* save the target of the transition */
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	689b      	ldr	r3, [r3, #8]
 8000c1e:	60bb      	str	r3, [r7, #8]
        path[1] = t;
 8000c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c22:	60fb      	str	r3, [r7, #12]
        path[2] = s;
 8000c24:	6a3b      	ldr	r3, [r7, #32]
 8000c26:	613b      	str	r3, [r7, #16]

        /* exit current state to transition source s... */
        for (; t != s; t = me->temp.fun) {
 8000c28:	e00d      	b.n	8000c46 <QHsm_dispatch_+0x82>
            if (QEP_TRIG_(t, Q_EXIT_SIG) == (QState)Q_RET_HANDLED) {
 8000c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c2c:	493f      	ldr	r1, [pc, #252]	; (8000d2c <QHsm_dispatch_+0x168>)
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	4798      	blx	r3
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b03      	cmp	r3, #3
 8000c36:	d103      	bne.n	8000c40 <QHsm_dispatch_+0x7c>
                QS_BEGIN_PRE_(QS_QEP_STATE_EXIT, qs_id)
                    QS_OBJ_PRE_(me);  /* this state machine object */
                    QS_FUN_PRE_(t);   /* the exited state */
                QS_END_PRE_()

                (void)QEP_TRIG_(t, QEP_EMPTY_SIG_); /* find superstate of t */
 8000c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c3a:	493b      	ldr	r1, [pc, #236]	; (8000d28 <QHsm_dispatch_+0x164>)
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	4798      	blx	r3
        for (; t != s; t = me->temp.fun) {
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	689b      	ldr	r3, [r3, #8]
 8000c44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c48:	6a3b      	ldr	r3, [r7, #32]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d1ed      	bne.n	8000c2a <QHsm_dispatch_+0x66>
        }

#ifdef Q_SPY
        ip = QHsm_tran_(me, path, qs_id);
#else
        ip = QHsm_tran_(me, path);
 8000c4e:	f107 0308 	add.w	r3, r7, #8
 8000c52:	4619      	mov	r1, r3
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f000 f86f 	bl	8000d38 <QHsm_tran_>
 8000c5a:	6278      	str	r0, [r7, #36]	; 0x24

        }
#endif /* Q_SPY */

        /* retrace the entry path in reverse (desired) order... */
        for (; ip >= 0; --ip) {
 8000c5c:	e00b      	b.n	8000c76 <QHsm_dispatch_+0xb2>
            QEP_ENTER_(path[ip], qs_id);  /* enter path[ip] */
 8000c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	3330      	adds	r3, #48	; 0x30
 8000c64:	443b      	add	r3, r7
 8000c66:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8000c6a:	4931      	ldr	r1, [pc, #196]	; (8000d30 <QHsm_dispatch_+0x16c>)
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	4798      	blx	r3
        for (; ip >= 0; --ip) {
 8000c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c72:	3b01      	subs	r3, #1
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
 8000c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	daf0      	bge.n	8000c5e <QHsm_dispatch_+0x9a>
        }

        t = path[0];      /* stick the target into register */
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        me->temp.fun = t; /* update the next state */
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c84:	609a      	str	r2, [r3, #8]

        /* drill into the target hierarchy... */
        while (QEP_TRIG_(t, Q_INIT_SIG) == (QState)Q_RET_TRAN) {
 8000c86:	e03b      	b.n	8000d00 <QHsm_dispatch_+0x13c>
                QS_OBJ_PRE_(me);           /* this state machine object */
                QS_FUN_PRE_(t);            /* the source (pseudo)state */
                QS_FUN_PRE_(me->temp.fun); /* the target of the transition */
            QS_END_PRE_()

            ip = 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24
            path[0] = me->temp.fun;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	689b      	ldr	r3, [r3, #8]
 8000c90:	60bb      	str	r3, [r7, #8]

            (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);/*find superstate */
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	689b      	ldr	r3, [r3, #8]
 8000c96:	4924      	ldr	r1, [pc, #144]	; (8000d28 <QHsm_dispatch_+0x164>)
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	4798      	blx	r3

            while (me->temp.fun != t) {
 8000c9c:	e00f      	b.n	8000cbe <QHsm_dispatch_+0xfa>
                ++ip;
 8000c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
                path[ip] = me->temp.fun;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	689a      	ldr	r2, [r3, #8]
 8000ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	3330      	adds	r3, #48	; 0x30
 8000cae:	443b      	add	r3, r7
 8000cb0:	f843 2c28 	str.w	r2, [r3, #-40]
                (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);/* find super */
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	491b      	ldr	r1, [pc, #108]	; (8000d28 <QHsm_dispatch_+0x164>)
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	4798      	blx	r3
            while (me->temp.fun != t) {
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d1ea      	bne.n	8000c9e <QHsm_dispatch_+0xda>
            }
            me->temp.fun = path[0];
 8000cc8:	68ba      	ldr	r2, [r7, #8]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	609a      	str	r2, [r3, #8]

            /* entry path must not overflow */
            Q_ASSERT_ID(410, ip < QHSM_MAX_NEST_DEPTH_);
 8000cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd0:	2b05      	cmp	r3, #5
 8000cd2:	dd04      	ble.n	8000cde <QHsm_dispatch_+0x11a>
 8000cd4:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8000cd8:	4812      	ldr	r0, [pc, #72]	; (8000d24 <QHsm_dispatch_+0x160>)
 8000cda:	f7ff fecb 	bl	8000a74 <Q_onAssert>

            /* retrace the entry path in reverse (correct) order... */
            do {
                QEP_ENTER_(path[ip], qs_id); /* enter path[ip] */
 8000cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	3330      	adds	r3, #48	; 0x30
 8000ce4:	443b      	add	r3, r7
 8000ce6:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8000cea:	4911      	ldr	r1, [pc, #68]	; (8000d30 <QHsm_dispatch_+0x16c>)
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	4798      	blx	r3
                --ip;
 8000cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
            } while (ip >= 0);
 8000cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	daf0      	bge.n	8000cde <QHsm_dispatch_+0x11a>

            t = path[0]; /* current state becomes the new source */
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (QEP_TRIG_(t, Q_INIT_SIG) == (QState)Q_RET_TRAN) {
 8000d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d02:	490c      	ldr	r1, [pc, #48]	; (8000d34 <QHsm_dispatch_+0x170>)
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	4798      	blx	r3
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b08      	cmp	r3, #8
 8000d0c:	d0bc      	beq.n	8000c88 <QHsm_dispatch_+0xc4>
        QS_END_PRE_()

    }
#endif /* Q_SPY */

    me->state.fun = t; /* change the current active state */
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d12:	605a      	str	r2, [r3, #4]
    me->temp.fun  = t; /* mark the configuration as stable */
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d18:	609a      	str	r2, [r3, #8]
}
 8000d1a:	bf00      	nop
 8000d1c:	3730      	adds	r7, #48	; 0x30
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	08002764 	.word	0x08002764
 8000d28:	0800276c 	.word	0x0800276c
 8000d2c:	08002774 	.word	0x08002774
 8000d30:	08002770 	.word	0x08002770
 8000d34:	08002778 	.word	0x08002778

08000d38 <QHsm_tran_>:
                              uint_fast8_t const qs_id)
#else
static int_fast8_t QHsm_tran_(QHsm * const me,
                              QStateHandler path[QHSM_MAX_NEST_DEPTH_])
#endif
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b088      	sub	sp, #32
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
    int_fast8_t ip = -1; /* transition entry path index */
 8000d42:	f04f 33ff 	mov.w	r3, #4294967295
 8000d46:	61fb      	str	r3, [r7, #28]
    int_fast8_t iq; /* helper transition entry path index */
    QStateHandler t = path[0];
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	617b      	str	r3, [r7, #20]
    QStateHandler const s = path[2];
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	689b      	ldr	r3, [r3, #8]
 8000d52:	60fb      	str	r3, [r7, #12]
    QState r;
    QS_CRIT_STAT_

    /* (a) check source==target (transition to self)... */
    if (s == t) {
 8000d54:	68fa      	ldr	r2, [r7, #12]
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d106      	bne.n	8000d6a <QHsm_tran_+0x32>
        QEP_EXIT_(s, qs_id); /* exit the source */
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	4964      	ldr	r1, [pc, #400]	; (8000ef0 <QHsm_tran_+0x1b8>)
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	4798      	blx	r3
        ip = 0; /* enter the target */
 8000d64:	2300      	movs	r3, #0
 8000d66:	61fb      	str	r3, [r7, #28]
 8000d68:	e0bc      	b.n	8000ee4 <QHsm_tran_+0x1ac>
    }
    else {
        (void)QEP_TRIG_(t, QEP_EMPTY_SIG_); /* find superstate of target */
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	4961      	ldr	r1, [pc, #388]	; (8000ef4 <QHsm_tran_+0x1bc>)
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	4798      	blx	r3

        t = me->temp.fun;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	617b      	str	r3, [r7, #20]

        /* (b) check source==target->super... */
        if (s == t) {
 8000d78:	68fa      	ldr	r2, [r7, #12]
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d102      	bne.n	8000d86 <QHsm_tran_+0x4e>
            ip = 0; /* enter the target */
 8000d80:	2300      	movs	r3, #0
 8000d82:	61fb      	str	r3, [r7, #28]
 8000d84:	e0ae      	b.n	8000ee4 <QHsm_tran_+0x1ac>
        }
        else {
            (void)QEP_TRIG_(s, QEP_EMPTY_SIG_); /* find superstate of src */
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	495a      	ldr	r1, [pc, #360]	; (8000ef4 <QHsm_tran_+0x1bc>)
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	4798      	blx	r3

            /* (c) check source->super==target->super... */
            if (me->temp.fun == t) {
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	697a      	ldr	r2, [r7, #20]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d106      	bne.n	8000da6 <QHsm_tran_+0x6e>
                QEP_EXIT_(s, qs_id); /* exit the source */
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	4955      	ldr	r1, [pc, #340]	; (8000ef0 <QHsm_tran_+0x1b8>)
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	4798      	blx	r3
                ip = 0; /* enter the target */
 8000da0:	2300      	movs	r3, #0
 8000da2:	61fb      	str	r3, [r7, #28]
 8000da4:	e09e      	b.n	8000ee4 <QHsm_tran_+0x1ac>
            }
            else {
                /* (d) check source->super==target... */
                if (me->temp.fun == path[0]) {
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	689a      	ldr	r2, [r3, #8]
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d104      	bne.n	8000dbc <QHsm_tran_+0x84>
                    QEP_EXIT_(s, qs_id); /* exit the source */
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	494e      	ldr	r1, [pc, #312]	; (8000ef0 <QHsm_tran_+0x1b8>)
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	4798      	blx	r3
 8000dba:	e093      	b.n	8000ee4 <QHsm_tran_+0x1ac>
                }
                else {
                    /* (e) check rest of source==target->super->super..
                    * and store the entry path along the way
                    */
                    iq = 0; /* indicate that LCA not found */
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61bb      	str	r3, [r7, #24]
                    ip = 1; /* enter target and its superstate */
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	61fb      	str	r3, [r7, #28]
                    path[1] = t;      /* save the superstate of target */
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	3304      	adds	r3, #4
 8000dc8:	697a      	ldr	r2, [r7, #20]
 8000dca:	601a      	str	r2, [r3, #0]
                    t = me->temp.fun; /* save source->super */
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	617b      	str	r3, [r7, #20]

                    /* find target->super->super... */
                    r = QEP_TRIG_(path[1], QEP_EMPTY_SIG_);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	3304      	adds	r3, #4
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4946      	ldr	r1, [pc, #280]	; (8000ef4 <QHsm_tran_+0x1bc>)
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	4798      	blx	r3
 8000dde:	6138      	str	r0, [r7, #16]
                    while (r == (QState)Q_RET_SUPER) {
 8000de0:	e024      	b.n	8000e2c <QHsm_tran_+0xf4>
                        ++ip;
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	3301      	adds	r3, #1
 8000de6:	61fb      	str	r3, [r7, #28]
                        path[ip] = me->temp.fun; /* store the entry path */
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	683a      	ldr	r2, [r7, #0]
 8000dee:	4413      	add	r3, r2
 8000df0:	687a      	ldr	r2, [r7, #4]
 8000df2:	6892      	ldr	r2, [r2, #8]
 8000df4:	601a      	str	r2, [r3, #0]
                        if (me->temp.fun == s) { /* is it the source? */
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	68fa      	ldr	r2, [r7, #12]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d10f      	bne.n	8000e20 <QHsm_tran_+0xe8>
                            iq = 1; /* indicate that LCA found */
 8000e00:	2301      	movs	r3, #1
 8000e02:	61bb      	str	r3, [r7, #24]

                            /* entry path must not overflow */
                            Q_ASSERT_ID(510,
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	2b05      	cmp	r3, #5
 8000e08:	dd04      	ble.n	8000e14 <QHsm_tran_+0xdc>
 8000e0a:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 8000e0e:	483a      	ldr	r0, [pc, #232]	; (8000ef8 <QHsm_tran_+0x1c0>)
 8000e10:	f7ff fe30 	bl	8000a74 <Q_onAssert>
                                ip < QHSM_MAX_NEST_DEPTH_);
                            --ip; /* do not enter the source */
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	3b01      	subs	r3, #1
 8000e18:	61fb      	str	r3, [r7, #28]
                            r = (QState)Q_RET_HANDLED; /* terminate loop */
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	613b      	str	r3, [r7, #16]
 8000e1e:	e005      	b.n	8000e2c <QHsm_tran_+0xf4>
                        }
                         /* it is not the source, keep going up */
                        else {
                            r = QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	4933      	ldr	r1, [pc, #204]	; (8000ef4 <QHsm_tran_+0x1bc>)
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	4798      	blx	r3
 8000e2a:	6138      	str	r0, [r7, #16]
                    while (r == (QState)Q_RET_SUPER) {
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d0d7      	beq.n	8000de2 <QHsm_tran_+0xaa>
                        }
                    }

                    /* the LCA not found yet? */
                    if (iq == 0) {
 8000e32:	69bb      	ldr	r3, [r7, #24]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d155      	bne.n	8000ee4 <QHsm_tran_+0x1ac>

                        /* entry path must not overflow */
                        Q_ASSERT_ID(520, ip < QHSM_MAX_NEST_DEPTH_);
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	2b05      	cmp	r3, #5
 8000e3c:	dd04      	ble.n	8000e48 <QHsm_tran_+0x110>
 8000e3e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8000e42:	482d      	ldr	r0, [pc, #180]	; (8000ef8 <QHsm_tran_+0x1c0>)
 8000e44:	f7ff fe16 	bl	8000a74 <Q_onAssert>

                        QEP_EXIT_(s, qs_id); /* exit the source */
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	4929      	ldr	r1, [pc, #164]	; (8000ef0 <QHsm_tran_+0x1b8>)
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	4798      	blx	r3

                        /* (f) check the rest of source->super
                        *                  == target->super->super...
                        */
                        iq = ip;
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	61bb      	str	r3, [r7, #24]
                        r = (QState)Q_RET_IGNORED; /* LCA NOT found */
 8000e54:	2304      	movs	r3, #4
 8000e56:	613b      	str	r3, [r7, #16]
                        do {
                            if (t == path[iq]) { /* is this the LCA? */
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	683a      	ldr	r2, [r7, #0]
 8000e5e:	4413      	add	r3, r2
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	697a      	ldr	r2, [r7, #20]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d108      	bne.n	8000e7a <QHsm_tran_+0x142>
                                r = (QState)Q_RET_HANDLED; /* LCA found */
 8000e68:	2303      	movs	r3, #3
 8000e6a:	613b      	str	r3, [r7, #16]
                                ip = iq - 1; /* do not enter LCA */
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	61fb      	str	r3, [r7, #28]
                                iq = -1; /* cause termintion of the loop */
 8000e72:	f04f 33ff 	mov.w	r3, #4294967295
 8000e76:	61bb      	str	r3, [r7, #24]
 8000e78:	e002      	b.n	8000e80 <QHsm_tran_+0x148>
                            }
                            else {
                                --iq; /* try lower superstate of target */
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	61bb      	str	r3, [r7, #24]
                            }
                        } while (iq >= 0);
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	dae8      	bge.n	8000e58 <QHsm_tran_+0x120>

                        /* LCA not found? */
                        if (r != (QState)Q_RET_HANDLED) {
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	2b03      	cmp	r3, #3
 8000e8a:	d02b      	beq.n	8000ee4 <QHsm_tran_+0x1ac>
                            /* (g) check each source->super->...
                            * for each target->super...
                            */
                            r = (QState)Q_RET_IGNORED; /* keep looping */
 8000e8c:	2304      	movs	r3, #4
 8000e8e:	613b      	str	r3, [r7, #16]
                            do {
                                /* exit t unhandled? */
                                if (QEP_TRIG_(t, Q_EXIT_SIG)
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	4917      	ldr	r1, [pc, #92]	; (8000ef0 <QHsm_tran_+0x1b8>)
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	4798      	blx	r3
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b03      	cmp	r3, #3
 8000e9c:	d103      	bne.n	8000ea6 <QHsm_tran_+0x16e>
                                    QS_BEGIN_PRE_(QS_QEP_STATE_EXIT, qs_id)
                                        QS_OBJ_PRE_(me);
                                        QS_FUN_PRE_(t);
                                    QS_END_PRE_()

                                    (void)QEP_TRIG_(t, QEP_EMPTY_SIG_);
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	4914      	ldr	r1, [pc, #80]	; (8000ef4 <QHsm_tran_+0x1bc>)
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	4798      	blx	r3
                                }
                                t = me->temp.fun; /* set to super of t */
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	617b      	str	r3, [r7, #20]
                                iq = ip;
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	61bb      	str	r3, [r7, #24]
                                do {
                                    /* is this LCA? */
                                    if (t == path[iq]) {
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	683a      	ldr	r2, [r7, #0]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	697a      	ldr	r2, [r7, #20]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d108      	bne.n	8000ed2 <QHsm_tran_+0x19a>
                                        /* do not enter LCA */
                                        ip = (int_fast8_t)(iq - 1);
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	61fb      	str	r3, [r7, #28]
                                        iq = -1; /* break out of inner loop */
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	61bb      	str	r3, [r7, #24]
                                        /* break out of outer loop */
                                        r = (QState)Q_RET_HANDLED;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	613b      	str	r3, [r7, #16]
 8000ed0:	e002      	b.n	8000ed8 <QHsm_tran_+0x1a0>
                                    }
                                    else {
                                        --iq;
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	3b01      	subs	r3, #1
 8000ed6:	61bb      	str	r3, [r7, #24]
                                    }
                                } while (iq >= 0);
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	dae8      	bge.n	8000eb0 <QHsm_tran_+0x178>
                            } while (r != (QState)Q_RET_HANDLED);
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	2b03      	cmp	r3, #3
 8000ee2:	d1d5      	bne.n	8000e90 <QHsm_tran_+0x158>
                    }
                }
            }
        }
    }
    return ip;
 8000ee4:	69fb      	ldr	r3, [r7, #28]
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3720      	adds	r7, #32
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	08002774 	.word	0x08002774
 8000ef4:	0800276c 	.word	0x0800276c
 8000ef8:	08002764 	.word	0x08002764

08000efc <QF_add_>:
* @note The priority of the active object @p a should be set before calling
* this function.
*
* @sa QF_remove_()
*/
void QF_add_(QActive * const a) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
    uint_fast8_t p = (uint_fast8_t)a->prio;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	7f1b      	ldrb	r3, [r3, #28]
 8000f08:	60fb      	str	r3, [r7, #12]
    /** @pre the priority of the active object must not be zero and cannot
    * exceed the maximum #QF_MAX_ACTIVE. Also, the priority of the active
    * object must not be already in use. QF requires each active object to
    * have a __unique__ priority.
    */
    Q_REQUIRE_ID(100, (0U < p)
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d008      	beq.n	8000f22 <QF_add_+0x26>
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	2b20      	cmp	r3, #32
 8000f14:	d805      	bhi.n	8000f22 <QF_add_+0x26>
 8000f16:	4a0d      	ldr	r2, [pc, #52]	; (8000f4c <QF_add_+0x50>)
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d003      	beq.n	8000f2a <QF_add_+0x2e>
 8000f22:	2164      	movs	r1, #100	; 0x64
 8000f24:	480a      	ldr	r0, [pc, #40]	; (8000f50 <QF_add_+0x54>)
 8000f26:	f7ff fda5 	bl	8000a74 <Q_onAssert>
                       && (p <= QF_MAX_ACTIVE)
                       && (QF_active_[p] == (QActive *)0));

    QF_CRIT_E_();
 8000f2a:	233f      	movs	r3, #63	; 0x3f
 8000f2c:	b672      	cpsid	i
 8000f2e:	f383 8811 	msr	BASEPRI, r3
 8000f32:	b662      	cpsie	i
    QF_active_[p] = a; /* register the active object at this priority */
 8000f34:	4905      	ldr	r1, [pc, #20]	; (8000f4c <QF_add_+0x50>)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    QF_CRIT_X_();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	f383 8811 	msr	BASEPRI, r3
}
 8000f44:	bf00      	nop
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000080 	.word	0x20000080
 8000f50:	08002784 	.word	0x08002784

08000f54 <QF_bzero>:
* variables upon startup. This is done to avoid problems with non-standard
* startup code provided with some compilers and toolsets (e.g., TI DSPs or
* Microchip MPLAB), which does not zero the uninitialized variables, as
* required by the ANSI C standard.
*/
void QF_bzero(void * const start, uint_fast16_t len) {
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
    uint8_t *ptr = (uint8_t *)start;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	60fb      	str	r3, [r7, #12]
    uint_fast16_t n;
    for (n = len; n > 0U; --n) {
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	e008      	b.n	8000f7a <QF_bzero+0x26>
        *ptr = 0U;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	701a      	strb	r2, [r3, #0]
        QF_PTR_INC_(ptr);
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	3301      	adds	r3, #1
 8000f72:	60fb      	str	r3, [r7, #12]
    for (n = len; n > 0U; --n) {
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d1f3      	bne.n	8000f68 <QF_bzero+0x14>
    }
}
 8000f80:	bf00      	nop
 8000f82:	bf00      	nop
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
	...

08000f90 <QActive_post_>:
                   uint_fast16_t const margin, void const * const sender)
#else
bool QActive_post_(QActive * const me, QEvt const * const e,
                   uint_fast16_t const margin)
#endif
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
    bool status;
    QF_CRIT_STAT_
    QS_TEST_PROBE_DEF(&QActive_post_)

    /** @pre event pointer must be valid */
    Q_REQUIRE_ID(100, e != (QEvt *)0);
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d103      	bne.n	8000faa <QActive_post_+0x1a>
 8000fa2:	2164      	movs	r1, #100	; 0x64
 8000fa4:	483f      	ldr	r0, [pc, #252]	; (80010a4 <QActive_post_+0x114>)
 8000fa6:	f7ff fd65 	bl	8000a74 <Q_onAssert>

    QF_CRIT_E_();
 8000faa:	233f      	movs	r3, #63	; 0x3f
 8000fac:	b672      	cpsid	i
 8000fae:	f383 8811 	msr	BASEPRI, r3
 8000fb2:	b662      	cpsie	i
    nFree = me->eQueue.nFree; /* get volatile into the temporary */
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	7ddb      	ldrb	r3, [r3, #23]
 8000fb8:	75bb      	strb	r3, [r7, #22]
    /* test-probe#1 for faking queue overflow */
    QS_TEST_PROBE_ID(1,
        nFree = 0U;
    )

    if (margin == QF_NO_MARGIN) {
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d10e      	bne.n	8000fe2 <QActive_post_+0x52>
        if (nFree > 0U) {
 8000fc4:	7dbb      	ldrb	r3, [r7, #22]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d002      	beq.n	8000fd0 <QActive_post_+0x40>
            status = true; /* can post */
 8000fca:	2301      	movs	r3, #1
 8000fcc:	75fb      	strb	r3, [r7, #23]
 8000fce:	e012      	b.n	8000ff6 <QActive_post_+0x66>
        }
        else {
            status = false; /* cannot post */
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	75fb      	strb	r3, [r7, #23]
            Q_ERROR_CRIT_(110); /* must be able to post the event */
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f383 8811 	msr	BASEPRI, r3
 8000fda:	216e      	movs	r1, #110	; 0x6e
 8000fdc:	4831      	ldr	r0, [pc, #196]	; (80010a4 <QActive_post_+0x114>)
 8000fde:	f7ff fd49 	bl	8000a74 <Q_onAssert>
        }
    }
    else if (nFree > (QEQueueCtr)margin) {
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	7dba      	ldrb	r2, [r7, #22]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d902      	bls.n	8000ff2 <QActive_post_+0x62>
        status = true; /* can post */
 8000fec:	2301      	movs	r3, #1
 8000fee:	75fb      	strb	r3, [r7, #23]
 8000ff0:	e001      	b.n	8000ff6 <QActive_post_+0x66>
    }
    else {
        status = false; /* cannot post, but don't assert */
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	75fb      	strb	r3, [r7, #23]
    }

    /* is it a dynamic event? */
    if (e->poolId_ != 0U) {
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	789b      	ldrb	r3, [r3, #2]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d006      	beq.n	800100c <QActive_post_+0x7c>
        QF_EVT_REF_CTR_INC_(e); /* increment the reference counter */
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	78db      	ldrb	r3, [r3, #3]
 8001002:	b2db      	uxtb	r3, r3
 8001004:	3301      	adds	r3, #1
 8001006:	b2da      	uxtb	r2, r3
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	70da      	strb	r2, [r3, #3]
    }

    if (status) { /* can post the event? */
 800100c:	7dfb      	ldrb	r3, [r7, #23]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d03d      	beq.n	800108e <QActive_post_+0xfe>

        --nFree; /* one free entry just used up */
 8001012:	7dbb      	ldrb	r3, [r7, #22]
 8001014:	3b01      	subs	r3, #1
 8001016:	75bb      	strb	r3, [r7, #22]
        me->eQueue.nFree = nFree; /* update the volatile */
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	7dba      	ldrb	r2, [r7, #22]
 800101c:	75da      	strb	r2, [r3, #23]
        if (me->eQueue.nMin > nFree) {
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	7e1b      	ldrb	r3, [r3, #24]
 8001022:	7dba      	ldrb	r2, [r7, #22]
 8001024:	429a      	cmp	r2, r3
 8001026:	d202      	bcs.n	800102e <QActive_post_+0x9e>
            me->eQueue.nMin = nFree; /* increase minimum so far */
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	7dba      	ldrb	r2, [r7, #22]
 800102c:	761a      	strb	r2, [r3, #24]
            QS_onTestPost(sender, me, e, status);
        }
#endif

        /* empty queue? */
        if (me->eQueue.frontEvt == (QEvt *)0) {
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d10e      	bne.n	8001054 <QActive_post_+0xc4>
            me->eQueue.frontEvt = e;    /* deliver event directly */
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	68ba      	ldr	r2, [r7, #8]
 800103a:	60da      	str	r2, [r3, #12]
            QACTIVE_EQUEUE_SIGNAL_(me); /* signal the event queue */
 800103c:	4b1a      	ldr	r3, [pc, #104]	; (80010a8 <QActive_post_+0x118>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	7f1b      	ldrb	r3, [r3, #28]
 8001044:	3b01      	subs	r3, #1
 8001046:	2101      	movs	r1, #1
 8001048:	fa01 f303 	lsl.w	r3, r1, r3
 800104c:	4313      	orrs	r3, r2
 800104e:	4a16      	ldr	r2, [pc, #88]	; (80010a8 <QActive_post_+0x118>)
 8001050:	6013      	str	r3, [r2, #0]
 8001052:	e018      	b.n	8001086 <QActive_post_+0xf6>
        }
        /* queue is not empty, insert event into the ring-buffer */
        else {
            /* insert event into the ring buffer (FIFO) */
            QF_PTR_AT_(me->eQueue.ring, me->eQueue.head) = e;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	691a      	ldr	r2, [r3, #16]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	7d5b      	ldrb	r3, [r3, #21]
 800105c:	b2db      	uxtb	r3, r3
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	4413      	add	r3, r2
 8001062:	68ba      	ldr	r2, [r7, #8]
 8001064:	601a      	str	r2, [r3, #0]

            if (me->eQueue.head == 0U) { /* need to wrap head? */
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	7d5b      	ldrb	r3, [r3, #21]
 800106a:	b2db      	uxtb	r3, r3
 800106c:	2b00      	cmp	r3, #0
 800106e:	d103      	bne.n	8001078 <QActive_post_+0xe8>
                me->eQueue.head = me->eQueue.end;   /* wrap around */
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	7d1a      	ldrb	r2, [r3, #20]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	755a      	strb	r2, [r3, #21]
            }
            --me->eQueue.head; /* advance the head (counter clockwise) */
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	7d5b      	ldrb	r3, [r3, #21]
 800107c:	b2db      	uxtb	r3, r3
 800107e:	3b01      	subs	r3, #1
 8001080:	b2da      	uxtb	r2, r3
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	755a      	strb	r2, [r3, #21]
        }

        QF_CRIT_X_();
 8001086:	2300      	movs	r3, #0
 8001088:	f383 8811 	msr	BASEPRI, r3
 800108c:	e005      	b.n	800109a <QActive_post_+0x10a>
        {
            QS_onTestPost(sender, me, e, status);
        }
#endif

        QF_CRIT_X_();
 800108e:	2300      	movs	r3, #0
 8001090:	f383 8811 	msr	BASEPRI, r3

        QF_gc(e); /* recycle the event to avoid a leak */
 8001094:	68b8      	ldr	r0, [r7, #8]
 8001096:	f000 f8cb 	bl	8001230 <QF_gc>
    }

    return status;
 800109a:	7dfb      	ldrb	r3, [r7, #23]
}
 800109c:	4618      	mov	r0, r3
 800109e:	3718      	adds	r7, #24
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	0800278c 	.word	0x0800278c
 80010a8:	2000016c 	.word	0x2000016c

080010ac <QActive_postLIFO_>:
* @attention
* This function should be called only via the macro QACTIVE_POST_LIFO().
*
* @sa QActive_post_(), QACTIVE_POST(), QACTIVE_POST_X()
*/
void QActive_postLIFO_(QActive * const me, QEvt const * const e) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
    QEvt const *frontEvt;  /* temporary to avoid UB for volatile access */
    QEQueueCtr nFree;      /* temporary to avoid UB for volatile access */
    QF_CRIT_STAT_
    QS_TEST_PROBE_DEF(&QActive_postLIFO_)

    QF_CRIT_E_();
 80010b6:	233f      	movs	r3, #63	; 0x3f
 80010b8:	b672      	cpsid	i
 80010ba:	f383 8811 	msr	BASEPRI, r3
 80010be:	b662      	cpsie	i
    nFree = me->eQueue.nFree; /* get volatile into the temporary */
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	7ddb      	ldrb	r3, [r3, #23]
 80010c4:	73fb      	strb	r3, [r7, #15]
    QS_TEST_PROBE_ID(1,
        nFree = 0U;
    )

    /* the queue must be able to accept the event (cannot overflow) */
    Q_ASSERT_CRIT_(210, nFree != 0U);
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d106      	bne.n	80010da <QActive_postLIFO_+0x2e>
 80010cc:	2300      	movs	r3, #0
 80010ce:	f383 8811 	msr	BASEPRI, r3
 80010d2:	21d2      	movs	r1, #210	; 0xd2
 80010d4:	4828      	ldr	r0, [pc, #160]	; (8001178 <QActive_postLIFO_+0xcc>)
 80010d6:	f7ff fccd 	bl	8000a74 <Q_onAssert>

    /* is it a dynamic event? */
    if (e->poolId_ != 0U) {
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	789b      	ldrb	r3, [r3, #2]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d006      	beq.n	80010f0 <QActive_postLIFO_+0x44>
        QF_EVT_REF_CTR_INC_(e); /* increment the reference counter */
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	78db      	ldrb	r3, [r3, #3]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	3301      	adds	r3, #1
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	70da      	strb	r2, [r3, #3]
    }

    --nFree; /* one free entry just used up */
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	73fb      	strb	r3, [r7, #15]
    me->eQueue.nFree = nFree; /* update the volatile */
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	7bfa      	ldrb	r2, [r7, #15]
 80010fa:	75da      	strb	r2, [r3, #23]
    if (me->eQueue.nMin > nFree) {
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	7e1b      	ldrb	r3, [r3, #24]
 8001100:	7bfa      	ldrb	r2, [r7, #15]
 8001102:	429a      	cmp	r2, r3
 8001104:	d202      	bcs.n	800110c <QActive_postLIFO_+0x60>
        me->eQueue.nMin = nFree; /* update minimum so far */
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	7bfa      	ldrb	r2, [r7, #15]
 800110a:	761a      	strb	r2, [r3, #24]
        {
            QS_onTestPost((QActive *)0, me, e, true);
        }
#endif

    frontEvt = me->eQueue.frontEvt; /* read volatile into the temporary */
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	60bb      	str	r3, [r7, #8]
    me->eQueue.frontEvt = e; /* deliver the event directly to the front */
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	683a      	ldr	r2, [r7, #0]
 8001116:	60da      	str	r2, [r3, #12]

    /* was the queue empty? */
    if (frontEvt == (QEvt *)0) {
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d10b      	bne.n	8001136 <QActive_postLIFO_+0x8a>
        QACTIVE_EQUEUE_SIGNAL_(me); /* signal the event queue */
 800111e:	4b17      	ldr	r3, [pc, #92]	; (800117c <QActive_postLIFO_+0xd0>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	7f1b      	ldrb	r3, [r3, #28]
 8001126:	3b01      	subs	r3, #1
 8001128:	2101      	movs	r1, #1
 800112a:	fa01 f303 	lsl.w	r3, r1, r3
 800112e:	4313      	orrs	r3, r2
 8001130:	4a12      	ldr	r2, [pc, #72]	; (800117c <QActive_postLIFO_+0xd0>)
 8001132:	6013      	str	r3, [r2, #0]
 8001134:	e019      	b.n	800116a <QActive_postLIFO_+0xbe>
    }
    /* queue was not empty, leave the event in the ring-buffer */
    else {
        ++me->eQueue.tail;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	7d9b      	ldrb	r3, [r3, #22]
 800113a:	b2db      	uxtb	r3, r3
 800113c:	3301      	adds	r3, #1
 800113e:	b2da      	uxtb	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	759a      	strb	r2, [r3, #22]
        /* need to wrap the tail? */
        if (me->eQueue.tail == me->eQueue.end) {
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	7d9b      	ldrb	r3, [r3, #22]
 8001148:	b2da      	uxtb	r2, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	7d1b      	ldrb	r3, [r3, #20]
 800114e:	429a      	cmp	r2, r3
 8001150:	d102      	bne.n	8001158 <QActive_postLIFO_+0xac>
            me->eQueue.tail = 0U; /* wrap around */
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	759a      	strb	r2, [r3, #22]
        }

        QF_PTR_AT_(me->eQueue.ring, me->eQueue.tail) = frontEvt;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	691a      	ldr	r2, [r3, #16]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	7d9b      	ldrb	r3, [r3, #22]
 8001160:	b2db      	uxtb	r3, r3
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	4413      	add	r3, r2
 8001166:	68ba      	ldr	r2, [r7, #8]
 8001168:	601a      	str	r2, [r3, #0]
    }
    QF_CRIT_X_();
 800116a:	2300      	movs	r3, #0
 800116c:	f383 8811 	msr	BASEPRI, r3
}
 8001170:	bf00      	nop
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	0800278c 	.word	0x0800278c
 800117c:	2000016c 	.word	0x2000016c

08001180 <QActive_get_>:
* queue implementation and is sometimes customized in the QF port
* (file qf_port.h). Depending on the definition of the macro
* QACTIVE_EQUEUE_WAIT_(), the function might block the calling thread when
* no events are available.
*/
QEvt const *QActive_get_(QActive * const me) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
    QEQueueCtr nFree;
    QEvt const *e;
    QF_CRIT_STAT_

    QF_CRIT_E_();
 8001188:	233f      	movs	r3, #63	; 0x3f
 800118a:	b672      	cpsid	i
 800118c:	f383 8811 	msr	BASEPRI, r3
 8001190:	b662      	cpsie	i
    QACTIVE_EQUEUE_WAIT_(me);  /* wait for event to arrive directly */
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d103      	bne.n	80011a2 <QActive_get_+0x22>
 800119a:	2100      	movs	r1, #0
 800119c:	4823      	ldr	r0, [pc, #140]	; (800122c <QActive_get_+0xac>)
 800119e:	f7ff fc69 	bl	8000a74 <Q_onAssert>

    e = me->eQueue.frontEvt; /* always remove event from the front location */
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	60fb      	str	r3, [r7, #12]
    nFree = me->eQueue.nFree + 1U; /* get volatile into tmp */
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	7ddb      	ldrb	r3, [r3, #23]
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	3301      	adds	r3, #1
 80011b0:	72fb      	strb	r3, [r7, #11]
    me->eQueue.nFree = nFree; /* update the number of free */
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	7afa      	ldrb	r2, [r7, #11]
 80011b6:	75da      	strb	r2, [r3, #23]

    /* any events in the ring buffer? */
    if (nFree <= me->eQueue.end) {
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	7d1b      	ldrb	r3, [r3, #20]
 80011bc:	7afa      	ldrb	r2, [r7, #11]
 80011be:	429a      	cmp	r2, r3
 80011c0:	d81a      	bhi.n	80011f8 <QActive_get_+0x78>

        /* remove event from the tail */
        me->eQueue.frontEvt = QF_PTR_AT_(me->eQueue.ring, me->eQueue.tail);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	691a      	ldr	r2, [r3, #16]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	7d9b      	ldrb	r3, [r3, #22]
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	4413      	add	r3, r2
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	60da      	str	r2, [r3, #12]
        if (me->eQueue.tail == 0U) { /* need to wrap the tail? */
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	7d9b      	ldrb	r3, [r3, #22]
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d103      	bne.n	80011e8 <QActive_get_+0x68>
            me->eQueue.tail = me->eQueue.end;   /* wrap around */
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	7d1a      	ldrb	r2, [r3, #20]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	759a      	strb	r2, [r3, #22]
        }
        --me->eQueue.tail;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	7d9b      	ldrb	r3, [r3, #22]
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	3b01      	subs	r3, #1
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	759a      	strb	r2, [r3, #22]
 80011f6:	e010      	b.n	800121a <QActive_get_+0x9a>
            QS_2U8_PRE_(e->poolId_, e->refCtr_); /* pool Id & ref Count */
            QS_EQC_PRE_(nFree);  /* # free entries */
        QS_END_NOCRIT_PRE_()
    }
    else {
        me->eQueue.frontEvt = (QEvt *)0; /* queue becomes empty */
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	60da      	str	r2, [r3, #12]

        /* all entries in the queue must be free (+1 for fronEvt) */
        Q_ASSERT_CRIT_(310, nFree == (me->eQueue.end + 1U));
 80011fe:	7afa      	ldrb	r2, [r7, #11]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	7d1b      	ldrb	r3, [r3, #20]
 8001204:	3301      	adds	r3, #1
 8001206:	429a      	cmp	r2, r3
 8001208:	d007      	beq.n	800121a <QActive_get_+0x9a>
 800120a:	2300      	movs	r3, #0
 800120c:	f383 8811 	msr	BASEPRI, r3
 8001210:	f44f 719b 	mov.w	r1, #310	; 0x136
 8001214:	4805      	ldr	r0, [pc, #20]	; (800122c <QActive_get_+0xac>)
 8001216:	f7ff fc2d 	bl	8000a74 <Q_onAssert>
            QS_SIG_PRE_(e->sig); /* the signal of this event */
            QS_OBJ_PRE_(me);     /* this active object */
            QS_2U8_PRE_(e->poolId_, e->refCtr_); /* pool Id & ref Count */
        QS_END_NOCRIT_PRE_()
    }
    QF_CRIT_X_();
 800121a:	2300      	movs	r3, #0
 800121c:	f383 8811 	msr	BASEPRI, r3
    return e;
 8001220:	68fb      	ldr	r3, [r7, #12]
}
 8001222:	4618      	mov	r0, r3
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	0800278c 	.word	0x0800278c

08001230 <QF_gc>:
* dynamic events to the "raw" thread-safe queues (see ::QEQueue). Such
* queues are processed outside of QF and the automatic garbage collection
* is **NOT** performed for these events. In this case you need to call
* QF_gc() explicitly.
*/
void QF_gc(QEvt const * const e) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]

    /* is it a dynamic event? */
    if (e->poolId_ != 0U) {
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	789b      	ldrb	r3, [r3, #2]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d031      	beq.n	80012a4 <QF_gc+0x74>
        QF_CRIT_STAT_
        QF_CRIT_E_();
 8001240:	233f      	movs	r3, #63	; 0x3f
 8001242:	b672      	cpsid	i
 8001244:	f383 8811 	msr	BASEPRI, r3
 8001248:	b662      	cpsie	i

        /* isn't this the last reference? */
        if (e->refCtr_ > 1U) {
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	78db      	ldrb	r3, [r3, #3]
 800124e:	b2db      	uxtb	r3, r3
 8001250:	2b01      	cmp	r3, #1
 8001252:	d90a      	bls.n	800126a <QF_gc+0x3a>
                QS_TIME_PRE_();         /* timestamp */
                QS_SIG_PRE_(e->sig);    /* the signal of the event */
                QS_2U8_PRE_(e->poolId_, e->refCtr_); /* pool Id & ref Count */
            QS_END_NOCRIT_PRE_()

            QF_EVT_REF_CTR_DEC_(e); /* decrement the ref counter */
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	78db      	ldrb	r3, [r3, #3]
 8001258:	b2db      	uxtb	r3, r3
 800125a:	3b01      	subs	r3, #1
 800125c:	b2da      	uxtb	r2, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	70da      	strb	r2, [r3, #3]

            QF_CRIT_X_();
 8001262:	2300      	movs	r3, #0
 8001264:	f383 8811 	msr	BASEPRI, r3
#else
            QF_EPOOL_PUT_(QF_pool_[idx], QF_EVT_CONST_CAST_(e), 0U);
#endif
        }
    }
}
 8001268:	e01c      	b.n	80012a4 <QF_gc+0x74>
            uint_fast8_t idx = (uint_fast8_t)e->poolId_ - 1U;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	789b      	ldrb	r3, [r3, #2]
 800126e:	3b01      	subs	r3, #1
 8001270:	60fb      	str	r3, [r7, #12]
            QF_CRIT_X_();
 8001272:	2300      	movs	r3, #0
 8001274:	f383 8811 	msr	BASEPRI, r3
            Q_ASSERT_ID(410, idx < QF_maxPool_);
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <QF_gc+0x7c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	68fa      	ldr	r2, [r7, #12]
 800127e:	429a      	cmp	r2, r3
 8001280:	d304      	bcc.n	800128c <QF_gc+0x5c>
 8001282:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8001286:	480a      	ldr	r0, [pc, #40]	; (80012b0 <QF_gc+0x80>)
 8001288:	f7ff fbf4 	bl	8000a74 <Q_onAssert>
            QF_EPOOL_PUT_(QF_pool_[idx], QF_EVT_CONST_CAST_(e), 0U);
 800128c:	68fa      	ldr	r2, [r7, #12]
 800128e:	4613      	mov	r3, r2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	4413      	add	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4a07      	ldr	r2, [pc, #28]	; (80012b4 <QF_gc+0x84>)
 8001298:	4413      	add	r3, r2
 800129a:	2200      	movs	r2, #0
 800129c:	6879      	ldr	r1, [r7, #4]
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 f80a 	bl	80012b8 <QMPool_put>
}
 80012a4:	bf00      	nop
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000140 	.word	0x20000140
 80012b0:	08002794 	.word	0x08002794
 80012b4:	20000104 	.word	0x20000104

080012b8 <QMPool_put>:
*
* @usage
* The following example illustrates how to use QMPool_put():
* @include qmp_use.c
*/
void QMPool_put(QMPool * const me, void *b, uint_fast8_t const qs_id) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
    QF_CRIT_STAT_

    /** @pre # free blocks cannot exceed the total # blocks and
    * the block pointer must be from this pool.
    */
    Q_REQUIRE_ID(200, (me->nFree < me->nTot)
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	8a1b      	ldrh	r3, [r3, #16]
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	89db      	ldrh	r3, [r3, #14]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d209      	bcs.n	80012e6 <QMPool_put+0x2e>
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d304      	bcc.n	80012e6 <QMPool_put+0x2e>
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	68ba      	ldr	r2, [r7, #8]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d903      	bls.n	80012ee <QMPool_put+0x36>
 80012e6:	21c8      	movs	r1, #200	; 0xc8
 80012e8:	480e      	ldr	r0, [pc, #56]	; (8001324 <QMPool_put+0x6c>)
 80012ea:	f7ff fbc3 	bl	8000a74 <Q_onAssert>
                      && QF_PTR_RANGE_(b, me->start, me->end));

    (void)qs_id; /* unused parameter (outside Q_SPY build configuration) */

    QF_CRIT_E_();
 80012ee:	233f      	movs	r3, #63	; 0x3f
 80012f0:	b672      	cpsid	i
 80012f2:	f383 8811 	msr	BASEPRI, r3
 80012f6:	b662      	cpsie	i
    ((QFreeBlock *)b)->next = (QFreeBlock *)me->free_head;/* link into list */
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	601a      	str	r2, [r3, #0]
    me->free_head = b;      /* set as new head of the free list */
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	68ba      	ldr	r2, [r7, #8]
 8001304:	601a      	str	r2, [r3, #0]
    ++me->nFree;            /* one more free block in this pool */
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	8a1b      	ldrh	r3, [r3, #16]
 800130a:	b29b      	uxth	r3, r3
 800130c:	3301      	adds	r3, #1
 800130e:	b29a      	uxth	r2, r3
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	821a      	strh	r2, [r3, #16]
        QS_TIME_PRE_();         /* timestamp */
        QS_OBJ_PRE_(me);        /* this memory pool */
        QS_MPC_PRE_(me->nFree); /* the number of free blocks in the pool */
    QS_END_NOCRIT_PRE_()

    QF_CRIT_X_();
 8001314:	2300      	movs	r3, #0
 8001316:	f383 8811 	msr	BASEPRI, r3
}
 800131a:	bf00      	nop
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	0800279c 	.word	0x0800279c

08001328 <QActive_ctor>:
* @param[in]     initial  pointer to the event to be dispatched to the MSM
*
* @note  Must be called only __once__ before QMSM_INIT().
* @sa QMsm_ctor() and QHsm_ctor()
*/
void QActive_ctor(QActive * const me, QStateHandler initial) {
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
    };
    /* clear the whole QActive object, so that the framework can start
    * correctly even if the startup code fails to clear the uninitialized
    * data (as is required by the C Standard).
    */
    QF_bzero(me, sizeof(*me));
 8001332:	2120      	movs	r1, #32
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff fe0d 	bl	8000f54 <QF_bzero>

    QHsm_ctor(&me->super, initial); /* explicitly call superclass' ctor */
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6839      	ldr	r1, [r7, #0]
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fba0 	bl	8000a84 <QHsm_ctor>
    me->super.vptr = &vtable.super; /* hook the vptr to QActive vtable */
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a03      	ldr	r2, [pc, #12]	; (8001354 <QActive_ctor+0x2c>)
 8001348:	601a      	str	r2, [r3, #0]
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	080027a4 	.word	0x080027a4

08001358 <QEQueue_init>:
* objects in the built-int QV and QK kernels, as well as other
* QP ports to OSes/RTOSes that do provide a suitable message queue.
*/
void QEQueue_init(QEQueue * const me, QEvt const * * const qSto,
                  uint_fast16_t const qLen)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
    me->frontEvt = (QEvt *)0; /* no events in the queue */
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
    me->ring     = qSto;      /* the beginning of the ring buffer */
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	68ba      	ldr	r2, [r7, #8]
 800136e:	605a      	str	r2, [r3, #4]
    me->end      = (QEQueueCtr)qLen;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	b2da      	uxtb	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	721a      	strb	r2, [r3, #8]
    if (qLen != 0U) {
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d005      	beq.n	800138a <QEQueue_init+0x32>
        me->head = 0U;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2200      	movs	r2, #0
 8001382:	725a      	strb	r2, [r3, #9]
        me->tail = 0U;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	2200      	movs	r2, #0
 8001388:	729a      	strb	r2, [r3, #10]
    }
    me->nFree    = (QEQueueCtr)(qLen + 1U); /* +1 for frontEvt */
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	b2db      	uxtb	r3, r3
 800138e:	3301      	adds	r3, #1
 8001390:	b2da      	uxtb	r2, r3
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	72da      	strb	r2, [r3, #11]
    me->nMin     = me->nFree;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	7adb      	ldrb	r3, [r3, #11]
 800139a:	b2da      	uxtb	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	731a      	strb	r2, [r3, #12]
}
 80013a0:	bf00      	nop
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <QF_tickX_>:
*/
void QF_tickX_(uint_fast8_t const tickRate, void const * const sender)
#else
void QF_tickX_(uint_fast8_t const tickRate)
#endif
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
    QTimeEvt *prev = &QF_timeEvtHead_[tickRate];
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	011b      	lsls	r3, r3, #4
 80013b8:	4a47      	ldr	r2, [pc, #284]	; (80014d8 <QF_tickX_+0x12c>)
 80013ba:	4413      	add	r3, r2
 80013bc:	617b      	str	r3, [r7, #20]
    QF_CRIT_STAT_

    QF_CRIT_E_();
 80013be:	233f      	movs	r3, #63	; 0x3f
 80013c0:	b672      	cpsid	i
 80013c2:	f383 8811 	msr	BASEPRI, r3
 80013c6:	b662      	cpsie	i
        QS_U8_PRE_(tickRate);   /* tick rate */
    QS_END_NOCRIT_PRE_()

    /* scan the linked-list of time events at this rate... */
    for (;;) {
        QTimeEvt *t = prev->next;  /* advance down the time evt. list */
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	613b      	str	r3, [r7, #16]

        /* end of the list? */
        if (t == (QTimeEvt *)0) {
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d123      	bne.n	800141c <QF_tickX_+0x70>

            /* any new time events armed since the last run of QF_tickX_()? */
            if (QF_timeEvtHead_[tickRate].act != (void *)0) {
 80013d4:	4a40      	ldr	r2, [pc, #256]	; (80014d8 <QF_tickX_+0x12c>)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	011b      	lsls	r3, r3, #4
 80013da:	4413      	add	r3, r2
 80013dc:	3308      	adds	r3, #8
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d071      	beq.n	80014c8 <QF_tickX_+0x11c>

                /* sanity check */
                Q_ASSERT_CRIT_(110, prev != (QTimeEvt *)0);
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d106      	bne.n	80013f8 <QF_tickX_+0x4c>
 80013ea:	2300      	movs	r3, #0
 80013ec:	f383 8811 	msr	BASEPRI, r3
 80013f0:	216e      	movs	r1, #110	; 0x6e
 80013f2:	483a      	ldr	r0, [pc, #232]	; (80014dc <QF_tickX_+0x130>)
 80013f4:	f7ff fb3e 	bl	8000a74 <Q_onAssert>
                prev->next = (QTimeEvt *)QF_timeEvtHead_[tickRate].act;
 80013f8:	4a37      	ldr	r2, [pc, #220]	; (80014d8 <QF_tickX_+0x12c>)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	011b      	lsls	r3, r3, #4
 80013fe:	4413      	add	r3, r2
 8001400:	3308      	adds	r3, #8
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	605a      	str	r2, [r3, #4]
                QF_timeEvtHead_[tickRate].act = (void *)0;
 8001408:	4a33      	ldr	r2, [pc, #204]	; (80014d8 <QF_tickX_+0x12c>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	011b      	lsls	r3, r3, #4
 800140e:	4413      	add	r3, r2
 8001410:	3308      	adds	r3, #8
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
                t = prev->next;  /* switch to the new list */
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	613b      	str	r3, [r7, #16]
                break; /* all currently armed time evts. processed */
            }
        }

        /* time event scheduled for removal? */
        if (t->ctr == 0U) {
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	899b      	ldrh	r3, [r3, #12]
 8001420:	b29b      	uxth	r3, r3
 8001422:	2b00      	cmp	r3, #0
 8001424:	d111      	bne.n	800144a <QF_tickX_+0x9e>
            prev->next = t->next;
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	605a      	str	r2, [r3, #4]
            /* mark time event 't' as NOT linked */
            t->super.refCtr_ &= (uint8_t)(~TE_IS_LINKED & 0xFFU);
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	78db      	ldrb	r3, [r3, #3]
 8001432:	b2db      	uxtb	r3, r3
 8001434:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001438:	b2da      	uxtb	r2, r3
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	70da      	strb	r2, [r3, #3]
            /* do NOT advance the prev pointer */
            QF_CRIT_X_(); /* exit crit. section to reduce latency */
 800143e:	2300      	movs	r3, #0
 8001440:	f383 8811 	msr	BASEPRI, r3

            /* prevent merging critical sections, see NOTE1 below  */
            QF_CRIT_EXIT_NOP();
 8001444:	f3bf 8f6f 	isb	sy
 8001448:	e038      	b.n	80014bc <QF_tickX_+0x110>
        }
        else {
            --t->ctr;
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	899b      	ldrh	r3, [r3, #12]
 800144e:	b29b      	uxth	r3, r3
 8001450:	3b01      	subs	r3, #1
 8001452:	b29a      	uxth	r2, r3
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	819a      	strh	r2, [r3, #12]

            /* is time event about to expire? */
            if (t->ctr == 0U) {
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	899b      	ldrh	r3, [r3, #12]
 800145c:	b29b      	uxth	r3, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	d125      	bne.n	80014ae <QF_tickX_+0x102>
                QActive *act = (QActive *)t->act; /* temp. for volatile */
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	60fb      	str	r3, [r7, #12]

                /* periodic time evt? */
                if (t->interval != 0U) {
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	89db      	ldrh	r3, [r3, #14]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d006      	beq.n	800147e <QF_tickX_+0xd2>
                    t->ctr = t->interval; /* rearm the time event */
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	89da      	ldrh	r2, [r3, #14]
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	819a      	strh	r2, [r3, #12]
                    prev = t; /* advance to this time event */
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	617b      	str	r3, [r7, #20]
 800147c:	e00b      	b.n	8001496 <QF_tickX_+0xea>
                }
                /* one-shot time event: automatically disarm */
                else {
                    prev->next = t->next;
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	685a      	ldr	r2, [r3, #4]
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	605a      	str	r2, [r3, #4]
                    /* mark time event 't' as NOT linked */
                    t->super.refCtr_ &= (uint8_t)(~TE_IS_LINKED & 0xFFU);
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	78db      	ldrb	r3, [r3, #3]
 800148a:	b2db      	uxtb	r3, r3
 800148c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001490:	b2da      	uxtb	r2, r3
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	70da      	strb	r2, [r3, #3]
                    QS_SIG_PRE_(t->super.sig); /* signal of this time event */
                    QS_OBJ_PRE_(act);          /* the target AO */
                    QS_U8_PRE_(tickRate);      /* tick rate */
                QS_END_NOCRIT_PRE_()

                QF_CRIT_X_(); /* exit critical section before posting */
 8001496:	2300      	movs	r3, #0
 8001498:	f383 8811 	msr	BASEPRI, r3

                /* QACTIVE_POST() asserts internally if the queue overflows */
                QACTIVE_POST(act, &t->super, sender);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	6939      	ldr	r1, [r7, #16]
 80014a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014a8:	68f8      	ldr	r0, [r7, #12]
 80014aa:	4798      	blx	r3
 80014ac:	e006      	b.n	80014bc <QF_tickX_+0x110>
            }
            else {
                prev = t;         /* advance to this time event */
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	617b      	str	r3, [r7, #20]
                QF_CRIT_X_();  /* exit crit. section to reduce latency */
 80014b2:	2300      	movs	r3, #0
 80014b4:	f383 8811 	msr	BASEPRI, r3

                /* prevent merging critical sections, see NOTE1 below  */
                QF_CRIT_EXIT_NOP();
 80014b8:	f3bf 8f6f 	isb	sy
            }
        }
        QF_CRIT_E_(); /* re-enter crit. section to continue */
 80014bc:	233f      	movs	r3, #63	; 0x3f
 80014be:	b672      	cpsid	i
 80014c0:	f383 8811 	msr	BASEPRI, r3
 80014c4:	b662      	cpsie	i
    for (;;) {
 80014c6:	e77f      	b.n	80013c8 <QF_tickX_+0x1c>
                break; /* all currently armed time evts. processed */
 80014c8:	bf00      	nop
    }
    QF_CRIT_X_();
 80014ca:	2300      	movs	r3, #0
 80014cc:	f383 8811 	msr	BASEPRI, r3
}
 80014d0:	bf00      	nop
 80014d2:	3718      	adds	r7, #24
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	2000014c 	.word	0x2000014c
 80014dc:	080027b8 	.word	0x080027b8

080014e0 <QTimeEvt_ctorX>:
* object **before** arming the Time Event. The ideal place for initializing
* the time event(s) associated with a given AO is the AO's constructor.
*/
void QTimeEvt_ctorX(QTimeEvt * const me, QActive * const act,
                    enum_t const sig, uint_fast8_t tickRate)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
 80014ec:	603b      	str	r3, [r7, #0]
    /** @pre The signal must be valid and the tick rate in range */
    Q_REQUIRE_ID(300, (sig >= (enum_t)Q_USER_SIG)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2b03      	cmp	r3, #3
 80014f2:	dd02      	ble.n	80014fa <QTimeEvt_ctorX+0x1a>
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d904      	bls.n	8001504 <QTimeEvt_ctorX+0x24>
 80014fa:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80014fe:	480f      	ldr	r0, [pc, #60]	; (800153c <QTimeEvt_ctorX+0x5c>)
 8001500:	f7ff fab8 	bl	8000a74 <Q_onAssert>
        && (tickRate < QF_MAX_TICK_RATE));

    me->next      = (QTimeEvt *)0;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2200      	movs	r2, #0
 8001508:	605a      	str	r2, [r3, #4]
    me->ctr       = 0U;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2200      	movs	r2, #0
 800150e:	819a      	strh	r2, [r3, #12]
    me->interval  = 0U;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2200      	movs	r2, #0
 8001514:	81da      	strh	r2, [r3, #14]
    me->super.sig = (QSignal)sig;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	b29a      	uxth	r2, r3
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	801a      	strh	r2, [r3, #0]
    /* For backwards compatibility with QTimeEvt_ctor(), the active object
    * pointer can be uninitialized (NULL) and is NOT validated in the
    * precondition. The active object pointer is validated in preconditions
    * to QTimeEvt_arm_() and QTimeEvt_rearm().
    */
    me->act       = act;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	68ba      	ldr	r2, [r7, #8]
 8001522:	609a      	str	r2, [r3, #8]

    /* Setting the POOL_ID event attribute to zero is correct only for
    * events not allocated from event pools, which must be the case
    * for Time Events.
    */
    me->super.poolId_ = 0U;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2200      	movs	r2, #0
 8001528:	709a      	strb	r2, [r3, #2]

    /* The refCtr_ attribute is not used in time events, so it is
    * reused to hold the tickRate as well as other information
    */
    me->super.refCtr_ = (uint8_t)tickRate;
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	b2da      	uxtb	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	70da      	strb	r2, [r3, #3]
}
 8001532:	bf00      	nop
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	080027b8 	.word	0x080027b8

08001540 <QTimeEvt_armX>:
* machine of an active object:
* @include qf_state.c
*/
void QTimeEvt_armX(QTimeEvt * const me,
                   QTimeEvtCtr const nTicks, QTimeEvtCtr const interval)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	460b      	mov	r3, r1
 800154a:	807b      	strh	r3, [r7, #2]
 800154c:	4613      	mov	r3, r2
 800154e:	803b      	strh	r3, [r7, #0]
    uint_fast8_t tickRate = ((uint_fast8_t)me->super.refCtr_ & TE_TICK_RATE);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	78db      	ldrb	r3, [r3, #3]
 8001554:	b2db      	uxtb	r3, r3
 8001556:	f003 030f 	and.w	r3, r3, #15
 800155a:	60fb      	str	r3, [r7, #12]
    QTimeEvtCtr ctr = me->ctr;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	899b      	ldrh	r3, [r3, #12]
 8001560:	817b      	strh	r3, [r7, #10]
    QF_CRIT_STAT_

    /** @pre the host AO must be valid, time evnet must be disarmed,
    * number of clock ticks cannot be zero, and the signal must be valid.
    */
    Q_REQUIRE_ID(400, (me->act != (void *)0)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d00c      	beq.n	8001584 <QTimeEvt_armX+0x44>
 800156a:	897b      	ldrh	r3, [r7, #10]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d109      	bne.n	8001584 <QTimeEvt_armX+0x44>
 8001570:	887b      	ldrh	r3, [r7, #2]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d006      	beq.n	8001584 <QTimeEvt_armX+0x44>
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d803      	bhi.n	8001584 <QTimeEvt_armX+0x44>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	881b      	ldrh	r3, [r3, #0]
 8001580:	2b03      	cmp	r3, #3
 8001582:	d804      	bhi.n	800158e <QTimeEvt_armX+0x4e>
 8001584:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001588:	4818      	ldr	r0, [pc, #96]	; (80015ec <QTimeEvt_armX+0xac>)
 800158a:	f7ff fa73 	bl	8000a74 <Q_onAssert>
                 && (me->super.sig >= (QSignal)Q_USER_SIG));
#ifdef Q_NASSERT
    (void)ctr; /* avoid compiler warning about unused variable */
#endif

    QF_CRIT_E_();
 800158e:	233f      	movs	r3, #63	; 0x3f
 8001590:	b672      	cpsid	i
 8001592:	f383 8811 	msr	BASEPRI, r3
 8001596:	b662      	cpsie	i
    me->ctr = nTicks;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	887a      	ldrh	r2, [r7, #2]
 800159c:	819a      	strh	r2, [r3, #12]
    me->interval = interval;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	883a      	ldrh	r2, [r7, #0]
 80015a2:	81da      	strh	r2, [r3, #14]
    /* is the time event unlinked?
    * NOTE: For the duration of a single clock tick of the specified tick
    * rate a time event can be disarmed and yet still linked into the list,
    * because un-linking is performed exclusively in the QF_tickX() function.
    */
    if ((me->super.refCtr_ & TE_IS_LINKED) == 0U) {
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	78db      	ldrb	r3, [r3, #3]
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	b25b      	sxtb	r3, r3
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	db16      	blt.n	80015de <QTimeEvt_armX+0x9e>
        me->super.refCtr_ |= TE_IS_LINKED; /* mark as linked */
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	78db      	ldrb	r3, [r3, #3]
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015ba:	b2da      	uxtb	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	70da      	strb	r2, [r3, #3]
        * list is appended to the main list of armed time events based on
        * QF_timeEvtHead_[tickRate].next. Again, this is to keep any
        * changes to the main list exclusively inside the QF_tickX()
        * function.
        */
        me->next = (QTimeEvt *)QF_timeEvtHead_[tickRate].act;
 80015c0:	4a0b      	ldr	r2, [pc, #44]	; (80015f0 <QTimeEvt_armX+0xb0>)
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	011b      	lsls	r3, r3, #4
 80015c6:	4413      	add	r3, r2
 80015c8:	3308      	adds	r3, #8
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	605a      	str	r2, [r3, #4]
        QF_timeEvtHead_[tickRate].act = me;
 80015d0:	4a07      	ldr	r2, [pc, #28]	; (80015f0 <QTimeEvt_armX+0xb0>)
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	011b      	lsls	r3, r3, #4
 80015d6:	4413      	add	r3, r2
 80015d8:	3308      	adds	r3, #8
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	601a      	str	r2, [r3, #0]
        QS_TEC_PRE_(nTicks);   /* the number of ticks */
        QS_TEC_PRE_(interval); /* the interval */
        QS_U8_PRE_(tickRate);  /* tick rate */
    QS_END_NOCRIT_PRE_()

    QF_CRIT_X_();
 80015de:	2300      	movs	r3, #0
 80015e0:	f383 8811 	msr	BASEPRI, r3
}
 80015e4:	bf00      	nop
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	080027b8 	.word	0x080027b8
 80015f0:	2000014c 	.word	0x2000014c

080015f4 <QF_init>:
*
* @note QF_init() clears the internal QF variables, so that the framework
* can start correctly even if the startup code fails to clear the
* uninitialized data (as is required by the C Standard).
*/
void QF_init(void) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
    QF_maxPool_      = 0U;
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <QF_init+0x38>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
    QF_subscrList_   = (QSubscrList *)0;
 80015fe:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <QF_init+0x3c>)
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
    QF_maxPubSignal_ = 0;
 8001604:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <QF_init+0x40>)
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]

    QF_bzero(&QF_timeEvtHead_[0], sizeof(QF_timeEvtHead_));
 800160a:	2120      	movs	r1, #32
 800160c:	480a      	ldr	r0, [pc, #40]	; (8001638 <QF_init+0x44>)
 800160e:	f7ff fca1 	bl	8000f54 <QF_bzero>
    QF_bzero(&QF_active_[0],      sizeof(QF_active_));
 8001612:	2184      	movs	r1, #132	; 0x84
 8001614:	4809      	ldr	r0, [pc, #36]	; (800163c <QF_init+0x48>)
 8001616:	f7ff fc9d 	bl	8000f54 <QF_bzero>
    QF_bzero(&QV_readySet_,       sizeof(QV_readySet_));
 800161a:	2104      	movs	r1, #4
 800161c:	4808      	ldr	r0, [pc, #32]	; (8001640 <QF_init+0x4c>)
 800161e:	f7ff fc99 	bl	8000f54 <QF_bzero>

#ifdef QV_INIT
    QV_INIT(); /* port-specific initialization of the QV kernel */
 8001622:	f000 f893 	bl	800174c <QV_init>
#endif
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000140 	.word	0x20000140
 8001630:	20000144 	.word	0x20000144
 8001634:	20000148 	.word	0x20000148
 8001638:	2000014c 	.word	0x2000014c
 800163c:	20000080 	.word	0x20000080
 8001640:	2000016c 	.word	0x2000016c

08001644 <QF_run>:
* QF_run() is typically called from main() after you initialize
* the QF and start at least one active object with QACTIVE_START().
*
* @returns In QV, the QF_run() function does not return.
*/
int_t QF_run(void) {
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
#ifdef Q_SPY
    uint_fast8_t pprev = 0U; /* previously used priority */
#endif

    QF_onStartup(); /* application-specific startup callback */
 800164a:	f7ff f9ef 	bl	8000a2c <QF_onStartup>

    /* the combined event-loop and background-loop of the QV kernel... */
    QF_INT_DISABLE();
 800164e:	233f      	movs	r3, #63	; 0x3f
 8001650:	b672      	cpsid	i
 8001652:	f383 8811 	msr	BASEPRI, r3
 8001656:	b662      	cpsie	i
        QEvt const *e;
        QActive *a;
        uint_fast8_t p;

        /* find the maximum priority AO ready to run */
        if (QPSet_notEmpty(&QV_readySet_)) {
 8001658:	4b1e      	ldr	r3, [pc, #120]	; (80016d4 <QF_run+0x90>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d031      	beq.n	80016c4 <QF_run+0x80>
            QPSet_findMax(&QV_readySet_, p);
 8001660:	4b1c      	ldr	r3, [pc, #112]	; (80016d4 <QF_run+0x90>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	fab3 f383 	clz	r3, r3
 8001668:	f1c3 0320 	rsb	r3, r3, #32
 800166c:	60fb      	str	r3, [r7, #12]
            a = QF_active_[p];
 800166e:	4a1a      	ldr	r2, [pc, #104]	; (80016d8 <QF_run+0x94>)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001676:	60bb      	str	r3, [r7, #8]
            QS_END_NOCRIT_PRE_()

            pprev = p; /* update previous priority */
#endif /* Q_SPY */

            QF_INT_ENABLE();
 8001678:	2300      	movs	r3, #0
 800167a:	f383 8811 	msr	BASEPRI, r3
            * 1. retrieve the event from the AO's event queue, which by this
            *    time must be non-empty and The "Vanialla" kernel asserts it.
            * 2. dispatch the event to the AO's state machine.
            * 3. determine if event is garbage and collect it if so
            */
            e = QActive_get_(a);
 800167e:	68b8      	ldr	r0, [r7, #8]
 8001680:	f7ff fd7e 	bl	8001180 <QActive_get_>
 8001684:	6078      	str	r0, [r7, #4]
            QHSM_DISPATCH(&a->super, e, a->prio);
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	68ba      	ldr	r2, [r7, #8]
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	4610      	mov	r0, r2
 8001692:	4798      	blx	r3
            QF_gc(e);
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff fdcb 	bl	8001230 <QF_gc>

            QF_INT_DISABLE();
 800169a:	233f      	movs	r3, #63	; 0x3f
 800169c:	b672      	cpsid	i
 800169e:	f383 8811 	msr	BASEPRI, r3
 80016a2:	b662      	cpsie	i

            if (a->eQueue.frontEvt == (QEvt *)0) { /* empty queue? */
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1d5      	bne.n	8001658 <QF_run+0x14>
                QPSet_remove(&QV_readySet_, p);
 80016ac:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <QF_run+0x90>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	2101      	movs	r1, #1
 80016b6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ba:	43db      	mvns	r3, r3
 80016bc:	4013      	ands	r3, r2
 80016be:	4a05      	ldr	r2, [pc, #20]	; (80016d4 <QF_run+0x90>)
 80016c0:	6013      	str	r3, [r2, #0]
 80016c2:	e7c9      	b.n	8001658 <QF_run+0x14>
            * queues) can change at any time by an interrupt posting events
            * to a queue. QV_onIdle() MUST enable interrupts internally,
            * perhaps at the same time as putting the CPU into a power-saving
            * mode.
            */
            QV_onIdle();
 80016c4:	f7ff f9cc 	bl	8000a60 <QV_onIdle>

            QF_INT_DISABLE();
 80016c8:	233f      	movs	r3, #63	; 0x3f
 80016ca:	b672      	cpsid	i
 80016cc:	f383 8811 	msr	BASEPRI, r3
 80016d0:	b662      	cpsie	i
    for (;;) {
 80016d2:	e7c1      	b.n	8001658 <QF_run+0x14>
 80016d4:	2000016c 	.word	0x2000016c
 80016d8:	20000080 	.word	0x20000080

080016dc <QActive_start_>:
*/
void QActive_start_(QActive * const me, uint_fast8_t prio,
                    QEvt const * * const qSto, uint_fast16_t const qLen,
                    void * const stkSto, uint_fast16_t const stkSize,
                    void const * const par)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
 80016e8:	603b      	str	r3, [r7, #0]
    (void)stkSize; /* unused parameter */

    /** @pre The priority must be in range and the stack storage must not
    * be provided, because the QV kernel does not need per-AO stacks.
    */
    Q_REQUIRE_ID(500, (0U < prio) && (prio <= QF_MAX_ACTIVE)
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d005      	beq.n	80016fc <QActive_start_+0x20>
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	2b20      	cmp	r3, #32
 80016f4:	d802      	bhi.n	80016fc <QActive_start_+0x20>
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d004      	beq.n	8001706 <QActive_start_+0x2a>
 80016fc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001700:	4811      	ldr	r0, [pc, #68]	; (8001748 <QActive_start_+0x6c>)
 8001702:	f7ff f9b7 	bl	8000a74 <Q_onAssert>
                      && (stkSto == (void *)0));

    QEQueue_init(&me->eQueue, qSto, qLen); /* initialize the built-in queue */
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	330c      	adds	r3, #12
 800170a:	683a      	ldr	r2, [r7, #0]
 800170c:	6879      	ldr	r1, [r7, #4]
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff fe22 	bl	8001358 <QEQueue_init>
    me->prio = (uint8_t)prio; /* set the current priority of the AO */
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	b2da      	uxtb	r2, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	771a      	strb	r2, [r3, #28]
    QF_add_(me); /* make QF aware of this active object */
 800171c:	68f8      	ldr	r0, [r7, #12]
 800171e:	f7ff fbed 	bl	8000efc <QF_add_>

    QHSM_INIT(&me->super, par, me->prio); /* top-most initial tran. */
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d103      	bne.n	8001732 <QActive_start_+0x56>
 800172a:	21ed      	movs	r1, #237	; 0xed
 800172c:	4806      	ldr	r0, [pc, #24]	; (8001748 <QActive_start_+0x6c>)
 800172e:	f7ff f9a1 	bl	8000a74 <Q_onAssert>
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	68fa      	ldr	r2, [r7, #12]
 800173a:	6a39      	ldr	r1, [r7, #32]
 800173c:	4610      	mov	r0, r2
 800173e:	4798      	blx	r3
    QS_FLUSH(); /* flush the trace buffer to the host */
}
 8001740:	bf00      	nop
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	080027c0 	.word	0x080027c0

0800174c <QV_init>:
* "kernel aware" interrupts.
*
* The interrupt priorities established in QV_init() can be later
* changed by the application-level code.
*/
void QV_init(void) {
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
    uint32_t n;

    /* set exception priorities to QF_BASEPRI...
    * SCB_SYSPRI1: Usage-fault, Bus-fault, Memory-fault
    */
    SCB_SYSPRI[1] |= (QF_BASEPRI << 16) | (QF_BASEPRI << 8) | QF_BASEPRI;
 8001752:	4b19      	ldr	r3, [pc, #100]	; (80017b8 <QV_init+0x6c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a18      	ldr	r2, [pc, #96]	; (80017b8 <QV_init+0x6c>)
 8001758:	f043 133f 	orr.w	r3, r3, #4128831	; 0x3f003f
 800175c:	f443 537c 	orr.w	r3, r3, #16128	; 0x3f00
 8001760:	6013      	str	r3, [r2, #0]

    /* SCB_SYSPRI2: SVCall */
    SCB_SYSPRI[2] |= (QF_BASEPRI << 24);
 8001762:	4b16      	ldr	r3, [pc, #88]	; (80017bc <QV_init+0x70>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a15      	ldr	r2, [pc, #84]	; (80017bc <QV_init+0x70>)
 8001768:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
 800176c:	6013      	str	r3, [r2, #0]

    /* SCB_SYSPRI3:  SysTick, PendSV, Debug */
    SCB_SYSPRI[3] |= (QF_BASEPRI << 24) | (QF_BASEPRI << 16) | QF_BASEPRI;
 800176e:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <QV_init+0x74>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a13      	ldr	r2, [pc, #76]	; (80017c0 <QV_init+0x74>)
 8001774:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
 8001778:	f043 133f 	orr.w	r3, r3, #4128831	; 0x3f003f
 800177c:	6013      	str	r3, [r2, #0]

    /* set all implemented IRQ priories to QF_BASEPRI... */
    n = 8U + ((*SCnSCB_ICTR & 0x7U) << 3); /* (# NVIC_PRIO registers)/4 */
 800177e:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <QV_init+0x78>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	00db      	lsls	r3, r3, #3
 8001784:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001788:	3308      	adds	r3, #8
 800178a:	607b      	str	r3, [r7, #4]
    do {
        --n;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3b01      	subs	r3, #1
 8001790:	607b      	str	r3, [r7, #4]
        NVIC_IP[n] = (QF_BASEPRI << 24) | (QF_BASEPRI << 16)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800179a:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800179e:	f04f 323f 	mov.w	r2, #1061109567	; 0x3f3f3f3f
 80017a2:	601a      	str	r2, [r3, #0]
                     | (QF_BASEPRI << 8) | QF_BASEPRI;
    } while (n != 0);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f0      	bne.n	800178c <QV_init+0x40>
}
 80017aa:	bf00      	nop
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	e000ed18 	.word	0xe000ed18
 80017bc:	e000ed1c 	.word	0xe000ed1c
 80017c0:	e000ed20 	.word	0xe000ed20
 80017c4:	e000e004 	.word	0xe000e004

080017c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017cc:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <HAL_Init+0x40>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a0d      	ldr	r2, [pc, #52]	; (8001808 <HAL_Init+0x40>)
 80017d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017d8:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <HAL_Init+0x40>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a0a      	ldr	r2, [pc, #40]	; (8001808 <HAL_Init+0x40>)
 80017de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017e4:	4b08      	ldr	r3, [pc, #32]	; (8001808 <HAL_Init+0x40>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a07      	ldr	r2, [pc, #28]	; (8001808 <HAL_Init+0x40>)
 80017ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f0:	2003      	movs	r0, #3
 80017f2:	f000 f90d 	bl	8001a10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017f6:	2000      	movs	r0, #0
 80017f8:	f000 f808 	bl	800180c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017fc:	f7fe ff54 	bl	80006a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40023c00 	.word	0x40023c00

0800180c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001814:	4b12      	ldr	r3, [pc, #72]	; (8001860 <HAL_InitTick+0x54>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4b12      	ldr	r3, [pc, #72]	; (8001864 <HAL_InitTick+0x58>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	4619      	mov	r1, r3
 800181e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001822:	fbb3 f3f1 	udiv	r3, r3, r1
 8001826:	fbb2 f3f3 	udiv	r3, r2, r3
 800182a:	4618      	mov	r0, r3
 800182c:	f000 f917 	bl	8001a5e <HAL_SYSTICK_Config>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e00e      	b.n	8001858 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2b0f      	cmp	r3, #15
 800183e:	d80a      	bhi.n	8001856 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001840:	2200      	movs	r2, #0
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	f04f 30ff 	mov.w	r0, #4294967295
 8001848:	f000 f8ed 	bl	8001a26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800184c:	4a06      	ldr	r2, [pc, #24]	; (8001868 <HAL_InitTick+0x5c>)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001852:	2300      	movs	r3, #0
 8001854:	e000      	b.n	8001858 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
}
 8001858:	4618      	mov	r0, r3
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20000000 	.word	0x20000000
 8001864:	20000008 	.word	0x20000008
 8001868:	20000004 	.word	0x20000004

0800186c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001870:	4b06      	ldr	r3, [pc, #24]	; (800188c <HAL_IncTick+0x20>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	461a      	mov	r2, r3
 8001876:	4b06      	ldr	r3, [pc, #24]	; (8001890 <HAL_IncTick+0x24>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4413      	add	r3, r2
 800187c:	4a04      	ldr	r2, [pc, #16]	; (8001890 <HAL_IncTick+0x24>)
 800187e:	6013      	str	r3, [r2, #0]
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	20000008 	.word	0x20000008
 8001890:	20000170 	.word	0x20000170

08001894 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return uwTick;
 8001898:	4b03      	ldr	r3, [pc, #12]	; (80018a8 <HAL_GetTick+0x14>)
 800189a:	681b      	ldr	r3, [r3, #0]
}
 800189c:	4618      	mov	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	20000170 	.word	0x20000170

080018ac <__NVIC_SetPriorityGrouping>:
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018bc:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <__NVIC_SetPriorityGrouping+0x44>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018c8:	4013      	ands	r3, r2
 80018ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018de:	4a04      	ldr	r2, [pc, #16]	; (80018f0 <__NVIC_SetPriorityGrouping+0x44>)
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	60d3      	str	r3, [r2, #12]
}
 80018e4:	bf00      	nop
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <__NVIC_GetPriorityGrouping>:
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f8:	4b04      	ldr	r3, [pc, #16]	; (800190c <__NVIC_GetPriorityGrouping+0x18>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	0a1b      	lsrs	r3, r3, #8
 80018fe:	f003 0307 	and.w	r3, r3, #7
}
 8001902:	4618      	mov	r0, r3
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <__NVIC_SetPriority>:
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	6039      	str	r1, [r7, #0]
 800191a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800191c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001920:	2b00      	cmp	r3, #0
 8001922:	db0a      	blt.n	800193a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	b2da      	uxtb	r2, r3
 8001928:	490c      	ldr	r1, [pc, #48]	; (800195c <__NVIC_SetPriority+0x4c>)
 800192a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192e:	0112      	lsls	r2, r2, #4
 8001930:	b2d2      	uxtb	r2, r2
 8001932:	440b      	add	r3, r1
 8001934:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001938:	e00a      	b.n	8001950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	b2da      	uxtb	r2, r3
 800193e:	4908      	ldr	r1, [pc, #32]	; (8001960 <__NVIC_SetPriority+0x50>)
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	f003 030f 	and.w	r3, r3, #15
 8001946:	3b04      	subs	r3, #4
 8001948:	0112      	lsls	r2, r2, #4
 800194a:	b2d2      	uxtb	r2, r2
 800194c:	440b      	add	r3, r1
 800194e:	761a      	strb	r2, [r3, #24]
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	e000e100 	.word	0xe000e100
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <NVIC_EncodePriority>:
{
 8001964:	b480      	push	{r7}
 8001966:	b089      	sub	sp, #36	; 0x24
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	f1c3 0307 	rsb	r3, r3, #7
 800197e:	2b04      	cmp	r3, #4
 8001980:	bf28      	it	cs
 8001982:	2304      	movcs	r3, #4
 8001984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	3304      	adds	r3, #4
 800198a:	2b06      	cmp	r3, #6
 800198c:	d902      	bls.n	8001994 <NVIC_EncodePriority+0x30>
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3b03      	subs	r3, #3
 8001992:	e000      	b.n	8001996 <NVIC_EncodePriority+0x32>
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001998:	f04f 32ff 	mov.w	r2, #4294967295
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	43da      	mvns	r2, r3
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	401a      	ands	r2, r3
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019ac:	f04f 31ff 	mov.w	r1, #4294967295
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	fa01 f303 	lsl.w	r3, r1, r3
 80019b6:	43d9      	mvns	r1, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019bc:	4313      	orrs	r3, r2
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3724      	adds	r7, #36	; 0x24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
	...

080019cc <SysTick_Config>:
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019dc:	d301      	bcc.n	80019e2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80019de:	2301      	movs	r3, #1
 80019e0:	e00f      	b.n	8001a02 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019e2:	4a0a      	ldr	r2, [pc, #40]	; (8001a0c <SysTick_Config+0x40>)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ea:	210f      	movs	r1, #15
 80019ec:	f04f 30ff 	mov.w	r0, #4294967295
 80019f0:	f7ff ff8e 	bl	8001910 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019f4:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <SysTick_Config+0x40>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019fa:	4b04      	ldr	r3, [pc, #16]	; (8001a0c <SysTick_Config+0x40>)
 80019fc:	2207      	movs	r2, #7
 80019fe:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	e000e010 	.word	0xe000e010

08001a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff ff47 	bl	80018ac <__NVIC_SetPriorityGrouping>
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b086      	sub	sp, #24
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	60b9      	str	r1, [r7, #8]
 8001a30:	607a      	str	r2, [r7, #4]
 8001a32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a38:	f7ff ff5c 	bl	80018f4 <__NVIC_GetPriorityGrouping>
 8001a3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	68b9      	ldr	r1, [r7, #8]
 8001a42:	6978      	ldr	r0, [r7, #20]
 8001a44:	f7ff ff8e 	bl	8001964 <NVIC_EncodePriority>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a4e:	4611      	mov	r1, r2
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff ff5d 	bl	8001910 <__NVIC_SetPriority>
}
 8001a56:	bf00      	nop
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff ffb0 	bl	80019cc <SysTick_Config>
 8001a6c:	4603      	mov	r3, r0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b089      	sub	sp, #36	; 0x24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a82:	2300      	movs	r3, #0
 8001a84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a86:	2300      	movs	r3, #0
 8001a88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
 8001a92:	e177      	b.n	8001d84 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a94:	2201      	movs	r2, #1
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	f040 8166 	bne.w	8001d7e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f003 0303 	and.w	r3, r3, #3
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d005      	beq.n	8001aca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d130      	bne.n	8001b2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	68da      	ldr	r2, [r3, #12]
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b00:	2201      	movs	r2, #1
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	091b      	lsrs	r3, r3, #4
 8001b16:	f003 0201 	and.w	r2, r3, #1
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	2b03      	cmp	r3, #3
 8001b36:	d017      	beq.n	8001b68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	2203      	movs	r2, #3
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 0303 	and.w	r3, r3, #3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d123      	bne.n	8001bbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	08da      	lsrs	r2, r3, #3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3208      	adds	r2, #8
 8001b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	220f      	movs	r2, #15
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	691a      	ldr	r2, [r3, #16]
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	08da      	lsrs	r2, r3, #3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	3208      	adds	r2, #8
 8001bb6:	69b9      	ldr	r1, [r7, #24]
 8001bb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	2203      	movs	r2, #3
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 0203 	and.w	r2, r3, #3
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f000 80c0 	beq.w	8001d7e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	4b66      	ldr	r3, [pc, #408]	; (8001d9c <HAL_GPIO_Init+0x324>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c06:	4a65      	ldr	r2, [pc, #404]	; (8001d9c <HAL_GPIO_Init+0x324>)
 8001c08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c0e:	4b63      	ldr	r3, [pc, #396]	; (8001d9c <HAL_GPIO_Init+0x324>)
 8001c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c1a:	4a61      	ldr	r2, [pc, #388]	; (8001da0 <HAL_GPIO_Init+0x328>)
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	089b      	lsrs	r3, r3, #2
 8001c20:	3302      	adds	r3, #2
 8001c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	f003 0303 	and.w	r3, r3, #3
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	220f      	movs	r2, #15
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43db      	mvns	r3, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a58      	ldr	r2, [pc, #352]	; (8001da4 <HAL_GPIO_Init+0x32c>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d037      	beq.n	8001cb6 <HAL_GPIO_Init+0x23e>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a57      	ldr	r2, [pc, #348]	; (8001da8 <HAL_GPIO_Init+0x330>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d031      	beq.n	8001cb2 <HAL_GPIO_Init+0x23a>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a56      	ldr	r2, [pc, #344]	; (8001dac <HAL_GPIO_Init+0x334>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d02b      	beq.n	8001cae <HAL_GPIO_Init+0x236>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a55      	ldr	r2, [pc, #340]	; (8001db0 <HAL_GPIO_Init+0x338>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d025      	beq.n	8001caa <HAL_GPIO_Init+0x232>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a54      	ldr	r2, [pc, #336]	; (8001db4 <HAL_GPIO_Init+0x33c>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d01f      	beq.n	8001ca6 <HAL_GPIO_Init+0x22e>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a53      	ldr	r2, [pc, #332]	; (8001db8 <HAL_GPIO_Init+0x340>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d019      	beq.n	8001ca2 <HAL_GPIO_Init+0x22a>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a52      	ldr	r2, [pc, #328]	; (8001dbc <HAL_GPIO_Init+0x344>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d013      	beq.n	8001c9e <HAL_GPIO_Init+0x226>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a51      	ldr	r2, [pc, #324]	; (8001dc0 <HAL_GPIO_Init+0x348>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d00d      	beq.n	8001c9a <HAL_GPIO_Init+0x222>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a50      	ldr	r2, [pc, #320]	; (8001dc4 <HAL_GPIO_Init+0x34c>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d007      	beq.n	8001c96 <HAL_GPIO_Init+0x21e>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a4f      	ldr	r2, [pc, #316]	; (8001dc8 <HAL_GPIO_Init+0x350>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d101      	bne.n	8001c92 <HAL_GPIO_Init+0x21a>
 8001c8e:	2309      	movs	r3, #9
 8001c90:	e012      	b.n	8001cb8 <HAL_GPIO_Init+0x240>
 8001c92:	230a      	movs	r3, #10
 8001c94:	e010      	b.n	8001cb8 <HAL_GPIO_Init+0x240>
 8001c96:	2308      	movs	r3, #8
 8001c98:	e00e      	b.n	8001cb8 <HAL_GPIO_Init+0x240>
 8001c9a:	2307      	movs	r3, #7
 8001c9c:	e00c      	b.n	8001cb8 <HAL_GPIO_Init+0x240>
 8001c9e:	2306      	movs	r3, #6
 8001ca0:	e00a      	b.n	8001cb8 <HAL_GPIO_Init+0x240>
 8001ca2:	2305      	movs	r3, #5
 8001ca4:	e008      	b.n	8001cb8 <HAL_GPIO_Init+0x240>
 8001ca6:	2304      	movs	r3, #4
 8001ca8:	e006      	b.n	8001cb8 <HAL_GPIO_Init+0x240>
 8001caa:	2303      	movs	r3, #3
 8001cac:	e004      	b.n	8001cb8 <HAL_GPIO_Init+0x240>
 8001cae:	2302      	movs	r3, #2
 8001cb0:	e002      	b.n	8001cb8 <HAL_GPIO_Init+0x240>
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e000      	b.n	8001cb8 <HAL_GPIO_Init+0x240>
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	69fa      	ldr	r2, [r7, #28]
 8001cba:	f002 0203 	and.w	r2, r2, #3
 8001cbe:	0092      	lsls	r2, r2, #2
 8001cc0:	4093      	lsls	r3, r2
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cc8:	4935      	ldr	r1, [pc, #212]	; (8001da0 <HAL_GPIO_Init+0x328>)
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	089b      	lsrs	r3, r3, #2
 8001cce:	3302      	adds	r3, #2
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cd6:	4b3d      	ldr	r3, [pc, #244]	; (8001dcc <HAL_GPIO_Init+0x354>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cfa:	4a34      	ldr	r2, [pc, #208]	; (8001dcc <HAL_GPIO_Init+0x354>)
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d00:	4b32      	ldr	r3, [pc, #200]	; (8001dcc <HAL_GPIO_Init+0x354>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d24:	4a29      	ldr	r2, [pc, #164]	; (8001dcc <HAL_GPIO_Init+0x354>)
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d2a:	4b28      	ldr	r3, [pc, #160]	; (8001dcc <HAL_GPIO_Init+0x354>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	43db      	mvns	r3, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4013      	ands	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d4e:	4a1f      	ldr	r2, [pc, #124]	; (8001dcc <HAL_GPIO_Init+0x354>)
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d54:	4b1d      	ldr	r3, [pc, #116]	; (8001dcc <HAL_GPIO_Init+0x354>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d003      	beq.n	8001d78 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d78:	4a14      	ldr	r2, [pc, #80]	; (8001dcc <HAL_GPIO_Init+0x354>)
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	3301      	adds	r3, #1
 8001d82:	61fb      	str	r3, [r7, #28]
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	2b0f      	cmp	r3, #15
 8001d88:	f67f ae84 	bls.w	8001a94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d8c:	bf00      	nop
 8001d8e:	bf00      	nop
 8001d90:	3724      	adds	r7, #36	; 0x24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	40013800 	.word	0x40013800
 8001da4:	40020000 	.word	0x40020000
 8001da8:	40020400 	.word	0x40020400
 8001dac:	40020800 	.word	0x40020800
 8001db0:	40020c00 	.word	0x40020c00
 8001db4:	40021000 	.word	0x40021000
 8001db8:	40021400 	.word	0x40021400
 8001dbc:	40021800 	.word	0x40021800
 8001dc0:	40021c00 	.word	0x40021c00
 8001dc4:	40022000 	.word	0x40022000
 8001dc8:	40022400 	.word	0x40022400
 8001dcc:	40013c00 	.word	0x40013c00

08001dd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	460b      	mov	r3, r1
 8001dda:	807b      	strh	r3, [r7, #2]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001de0:	787b      	ldrb	r3, [r7, #1]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001de6:	887a      	ldrh	r2, [r7, #2]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dec:	e003      	b.n	8001df6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dee:	887b      	ldrh	r3, [r7, #2]
 8001df0:	041a      	lsls	r2, r3, #16
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	619a      	str	r2, [r3, #24]
}
 8001df6:	bf00      	nop
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
	...

08001e04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e267      	b.n	80022e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d075      	beq.n	8001f0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e22:	4b88      	ldr	r3, [pc, #544]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 030c 	and.w	r3, r3, #12
 8001e2a:	2b04      	cmp	r3, #4
 8001e2c:	d00c      	beq.n	8001e48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e2e:	4b85      	ldr	r3, [pc, #532]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e36:	2b08      	cmp	r3, #8
 8001e38:	d112      	bne.n	8001e60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e3a:	4b82      	ldr	r3, [pc, #520]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e46:	d10b      	bne.n	8001e60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e48:	4b7e      	ldr	r3, [pc, #504]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d05b      	beq.n	8001f0c <HAL_RCC_OscConfig+0x108>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d157      	bne.n	8001f0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e242      	b.n	80022e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e68:	d106      	bne.n	8001e78 <HAL_RCC_OscConfig+0x74>
 8001e6a:	4b76      	ldr	r3, [pc, #472]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a75      	ldr	r2, [pc, #468]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8001e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e74:	6013      	str	r3, [r2, #0]
 8001e76:	e01d      	b.n	8001eb4 <HAL_RCC_OscConfig+0xb0>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e80:	d10c      	bne.n	8001e9c <HAL_RCC_OscConfig+0x98>
 8001e82:	4b70      	ldr	r3, [pc, #448]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a6f      	ldr	r2, [pc, #444]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8001e88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e8c:	6013      	str	r3, [r2, #0]
 8001e8e:	4b6d      	ldr	r3, [pc, #436]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a6c      	ldr	r2, [pc, #432]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8001e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e98:	6013      	str	r3, [r2, #0]
 8001e9a:	e00b      	b.n	8001eb4 <HAL_RCC_OscConfig+0xb0>
 8001e9c:	4b69      	ldr	r3, [pc, #420]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a68      	ldr	r2, [pc, #416]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8001ea2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ea6:	6013      	str	r3, [r2, #0]
 8001ea8:	4b66      	ldr	r3, [pc, #408]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a65      	ldr	r2, [pc, #404]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8001eae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d013      	beq.n	8001ee4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ebc:	f7ff fcea 	bl	8001894 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ec4:	f7ff fce6 	bl	8001894 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b64      	cmp	r3, #100	; 0x64
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e207      	b.n	80022e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed6:	4b5b      	ldr	r3, [pc, #364]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d0f0      	beq.n	8001ec4 <HAL_RCC_OscConfig+0xc0>
 8001ee2:	e014      	b.n	8001f0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee4:	f7ff fcd6 	bl	8001894 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eec:	f7ff fcd2 	bl	8001894 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b64      	cmp	r3, #100	; 0x64
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e1f3      	b.n	80022e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001efe:	4b51      	ldr	r3, [pc, #324]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1f0      	bne.n	8001eec <HAL_RCC_OscConfig+0xe8>
 8001f0a:	e000      	b.n	8001f0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d063      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f1a:	4b4a      	ldr	r3, [pc, #296]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 030c 	and.w	r3, r3, #12
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00b      	beq.n	8001f3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f26:	4b47      	ldr	r3, [pc, #284]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f2e:	2b08      	cmp	r3, #8
 8001f30:	d11c      	bne.n	8001f6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f32:	4b44      	ldr	r3, [pc, #272]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d116      	bne.n	8001f6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f3e:	4b41      	ldr	r3, [pc, #260]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d005      	beq.n	8001f56 <HAL_RCC_OscConfig+0x152>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d001      	beq.n	8001f56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e1c7      	b.n	80022e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f56:	4b3b      	ldr	r3, [pc, #236]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	4937      	ldr	r1, [pc, #220]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f6a:	e03a      	b.n	8001fe2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d020      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f74:	4b34      	ldr	r3, [pc, #208]	; (8002048 <HAL_RCC_OscConfig+0x244>)
 8001f76:	2201      	movs	r2, #1
 8001f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7a:	f7ff fc8b 	bl	8001894 <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f80:	e008      	b.n	8001f94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f82:	f7ff fc87 	bl	8001894 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e1a8      	b.n	80022e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f94:	4b2b      	ldr	r3, [pc, #172]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0f0      	beq.n	8001f82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa0:	4b28      	ldr	r3, [pc, #160]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	4925      	ldr	r1, [pc, #148]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	600b      	str	r3, [r1, #0]
 8001fb4:	e015      	b.n	8001fe2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fb6:	4b24      	ldr	r3, [pc, #144]	; (8002048 <HAL_RCC_OscConfig+0x244>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fbc:	f7ff fc6a 	bl	8001894 <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fc4:	f7ff fc66 	bl	8001894 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e187      	b.n	80022e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fd6:	4b1b      	ldr	r3, [pc, #108]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1f0      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d036      	beq.n	800205c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d016      	beq.n	8002024 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ff6:	4b15      	ldr	r3, [pc, #84]	; (800204c <HAL_RCC_OscConfig+0x248>)
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ffc:	f7ff fc4a 	bl	8001894 <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002004:	f7ff fc46 	bl	8001894 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e167      	b.n	80022e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002016:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8002018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0f0      	beq.n	8002004 <HAL_RCC_OscConfig+0x200>
 8002022:	e01b      	b.n	800205c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002024:	4b09      	ldr	r3, [pc, #36]	; (800204c <HAL_RCC_OscConfig+0x248>)
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800202a:	f7ff fc33 	bl	8001894 <HAL_GetTick>
 800202e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002030:	e00e      	b.n	8002050 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002032:	f7ff fc2f 	bl	8001894 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d907      	bls.n	8002050 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e150      	b.n	80022e6 <HAL_RCC_OscConfig+0x4e2>
 8002044:	40023800 	.word	0x40023800
 8002048:	42470000 	.word	0x42470000
 800204c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002050:	4b88      	ldr	r3, [pc, #544]	; (8002274 <HAL_RCC_OscConfig+0x470>)
 8002052:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d1ea      	bne.n	8002032 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0304 	and.w	r3, r3, #4
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 8097 	beq.w	8002198 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800206a:	2300      	movs	r3, #0
 800206c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800206e:	4b81      	ldr	r3, [pc, #516]	; (8002274 <HAL_RCC_OscConfig+0x470>)
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d10f      	bne.n	800209a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	4b7d      	ldr	r3, [pc, #500]	; (8002274 <HAL_RCC_OscConfig+0x470>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	4a7c      	ldr	r2, [pc, #496]	; (8002274 <HAL_RCC_OscConfig+0x470>)
 8002084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002088:	6413      	str	r3, [r2, #64]	; 0x40
 800208a:	4b7a      	ldr	r3, [pc, #488]	; (8002274 <HAL_RCC_OscConfig+0x470>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002092:	60bb      	str	r3, [r7, #8]
 8002094:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002096:	2301      	movs	r3, #1
 8002098:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800209a:	4b77      	ldr	r3, [pc, #476]	; (8002278 <HAL_RCC_OscConfig+0x474>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d118      	bne.n	80020d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020a6:	4b74      	ldr	r3, [pc, #464]	; (8002278 <HAL_RCC_OscConfig+0x474>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a73      	ldr	r2, [pc, #460]	; (8002278 <HAL_RCC_OscConfig+0x474>)
 80020ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020b2:	f7ff fbef 	bl	8001894 <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ba:	f7ff fbeb 	bl	8001894 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e10c      	b.n	80022e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020cc:	4b6a      	ldr	r3, [pc, #424]	; (8002278 <HAL_RCC_OscConfig+0x474>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d0f0      	beq.n	80020ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d106      	bne.n	80020ee <HAL_RCC_OscConfig+0x2ea>
 80020e0:	4b64      	ldr	r3, [pc, #400]	; (8002274 <HAL_RCC_OscConfig+0x470>)
 80020e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e4:	4a63      	ldr	r2, [pc, #396]	; (8002274 <HAL_RCC_OscConfig+0x470>)
 80020e6:	f043 0301 	orr.w	r3, r3, #1
 80020ea:	6713      	str	r3, [r2, #112]	; 0x70
 80020ec:	e01c      	b.n	8002128 <HAL_RCC_OscConfig+0x324>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	2b05      	cmp	r3, #5
 80020f4:	d10c      	bne.n	8002110 <HAL_RCC_OscConfig+0x30c>
 80020f6:	4b5f      	ldr	r3, [pc, #380]	; (8002274 <HAL_RCC_OscConfig+0x470>)
 80020f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fa:	4a5e      	ldr	r2, [pc, #376]	; (8002274 <HAL_RCC_OscConfig+0x470>)
 80020fc:	f043 0304 	orr.w	r3, r3, #4
 8002100:	6713      	str	r3, [r2, #112]	; 0x70
 8002102:	4b5c      	ldr	r3, [pc, #368]	; (8002274 <HAL_RCC_OscConfig+0x470>)
 8002104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002106:	4a5b      	ldr	r2, [pc, #364]	; (8002274 <HAL_RCC_OscConfig+0x470>)
 8002108:	f043 0301 	orr.w	r3, r3, #1
 800210c:	6713      	str	r3, [r2, #112]	; 0x70
 800210e:	e00b      	b.n	8002128 <HAL_RCC_OscConfig+0x324>
 8002110:	4b58      	ldr	r3, [pc, #352]	; (8002274 <HAL_RCC_OscConfig+0x470>)
 8002112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002114:	4a57      	ldr	r2, [pc, #348]	; (8002274 <HAL_RCC_OscConfig+0x470>)
 8002116:	f023 0301 	bic.w	r3, r3, #1
 800211a:	6713      	str	r3, [r2, #112]	; 0x70
 800211c:	4b55      	ldr	r3, [pc, #340]	; (8002274 <HAL_RCC_OscConfig+0x470>)
 800211e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002120:	4a54      	ldr	r2, [pc, #336]	; (8002274 <HAL_RCC_OscConfig+0x470>)
 8002122:	f023 0304 	bic.w	r3, r3, #4
 8002126:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d015      	beq.n	800215c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002130:	f7ff fbb0 	bl	8001894 <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002136:	e00a      	b.n	800214e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002138:	f7ff fbac 	bl	8001894 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	f241 3288 	movw	r2, #5000	; 0x1388
 8002146:	4293      	cmp	r3, r2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e0cb      	b.n	80022e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800214e:	4b49      	ldr	r3, [pc, #292]	; (8002274 <HAL_RCC_OscConfig+0x470>)
 8002150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0ee      	beq.n	8002138 <HAL_RCC_OscConfig+0x334>
 800215a:	e014      	b.n	8002186 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800215c:	f7ff fb9a 	bl	8001894 <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002162:	e00a      	b.n	800217a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002164:	f7ff fb96 	bl	8001894 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002172:	4293      	cmp	r3, r2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e0b5      	b.n	80022e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800217a:	4b3e      	ldr	r3, [pc, #248]	; (8002274 <HAL_RCC_OscConfig+0x470>)
 800217c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1ee      	bne.n	8002164 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002186:	7dfb      	ldrb	r3, [r7, #23]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d105      	bne.n	8002198 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800218c:	4b39      	ldr	r3, [pc, #228]	; (8002274 <HAL_RCC_OscConfig+0x470>)
 800218e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002190:	4a38      	ldr	r2, [pc, #224]	; (8002274 <HAL_RCC_OscConfig+0x470>)
 8002192:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002196:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	2b00      	cmp	r3, #0
 800219e:	f000 80a1 	beq.w	80022e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021a2:	4b34      	ldr	r3, [pc, #208]	; (8002274 <HAL_RCC_OscConfig+0x470>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 030c 	and.w	r3, r3, #12
 80021aa:	2b08      	cmp	r3, #8
 80021ac:	d05c      	beq.n	8002268 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d141      	bne.n	800223a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021b6:	4b31      	ldr	r3, [pc, #196]	; (800227c <HAL_RCC_OscConfig+0x478>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021bc:	f7ff fb6a 	bl	8001894 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021c4:	f7ff fb66 	bl	8001894 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e087      	b.n	80022e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021d6:	4b27      	ldr	r3, [pc, #156]	; (8002274 <HAL_RCC_OscConfig+0x470>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1f0      	bne.n	80021c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	69da      	ldr	r2, [r3, #28]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a1b      	ldr	r3, [r3, #32]
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f0:	019b      	lsls	r3, r3, #6
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f8:	085b      	lsrs	r3, r3, #1
 80021fa:	3b01      	subs	r3, #1
 80021fc:	041b      	lsls	r3, r3, #16
 80021fe:	431a      	orrs	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002204:	061b      	lsls	r3, r3, #24
 8002206:	491b      	ldr	r1, [pc, #108]	; (8002274 <HAL_RCC_OscConfig+0x470>)
 8002208:	4313      	orrs	r3, r2
 800220a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800220c:	4b1b      	ldr	r3, [pc, #108]	; (800227c <HAL_RCC_OscConfig+0x478>)
 800220e:	2201      	movs	r2, #1
 8002210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002212:	f7ff fb3f 	bl	8001894 <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800221a:	f7ff fb3b 	bl	8001894 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e05c      	b.n	80022e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800222c:	4b11      	ldr	r3, [pc, #68]	; (8002274 <HAL_RCC_OscConfig+0x470>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d0f0      	beq.n	800221a <HAL_RCC_OscConfig+0x416>
 8002238:	e054      	b.n	80022e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800223a:	4b10      	ldr	r3, [pc, #64]	; (800227c <HAL_RCC_OscConfig+0x478>)
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002240:	f7ff fb28 	bl	8001894 <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002248:	f7ff fb24 	bl	8001894 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e045      	b.n	80022e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800225a:	4b06      	ldr	r3, [pc, #24]	; (8002274 <HAL_RCC_OscConfig+0x470>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1f0      	bne.n	8002248 <HAL_RCC_OscConfig+0x444>
 8002266:	e03d      	b.n	80022e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d107      	bne.n	8002280 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e038      	b.n	80022e6 <HAL_RCC_OscConfig+0x4e2>
 8002274:	40023800 	.word	0x40023800
 8002278:	40007000 	.word	0x40007000
 800227c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002280:	4b1b      	ldr	r3, [pc, #108]	; (80022f0 <HAL_RCC_OscConfig+0x4ec>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d028      	beq.n	80022e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002298:	429a      	cmp	r2, r3
 800229a:	d121      	bne.n	80022e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d11a      	bne.n	80022e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022b0:	4013      	ands	r3, r2
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d111      	bne.n	80022e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c6:	085b      	lsrs	r3, r3, #1
 80022c8:	3b01      	subs	r3, #1
 80022ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d107      	bne.n	80022e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022dc:	429a      	cmp	r2, r3
 80022de:	d001      	beq.n	80022e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e000      	b.n	80022e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3718      	adds	r7, #24
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40023800 	.word	0x40023800

080022f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e0cc      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002308:	4b68      	ldr	r3, [pc, #416]	; (80024ac <HAL_RCC_ClockConfig+0x1b8>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 030f 	and.w	r3, r3, #15
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	429a      	cmp	r2, r3
 8002314:	d90c      	bls.n	8002330 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002316:	4b65      	ldr	r3, [pc, #404]	; (80024ac <HAL_RCC_ClockConfig+0x1b8>)
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800231e:	4b63      	ldr	r3, [pc, #396]	; (80024ac <HAL_RCC_ClockConfig+0x1b8>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	429a      	cmp	r2, r3
 800232a:	d001      	beq.n	8002330 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e0b8      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d020      	beq.n	800237e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0304 	and.w	r3, r3, #4
 8002344:	2b00      	cmp	r3, #0
 8002346:	d005      	beq.n	8002354 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002348:	4b59      	ldr	r3, [pc, #356]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	4a58      	ldr	r2, [pc, #352]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 800234e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002352:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0308 	and.w	r3, r3, #8
 800235c:	2b00      	cmp	r3, #0
 800235e:	d005      	beq.n	800236c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002360:	4b53      	ldr	r3, [pc, #332]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	4a52      	ldr	r2, [pc, #328]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002366:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800236a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800236c:	4b50      	ldr	r3, [pc, #320]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	494d      	ldr	r1, [pc, #308]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 800237a:	4313      	orrs	r3, r2
 800237c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	d044      	beq.n	8002414 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d107      	bne.n	80023a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002392:	4b47      	ldr	r3, [pc, #284]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d119      	bne.n	80023d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e07f      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d003      	beq.n	80023b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ae:	2b03      	cmp	r3, #3
 80023b0:	d107      	bne.n	80023c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023b2:	4b3f      	ldr	r3, [pc, #252]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d109      	bne.n	80023d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e06f      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c2:	4b3b      	ldr	r3, [pc, #236]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e067      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023d2:	4b37      	ldr	r3, [pc, #220]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f023 0203 	bic.w	r2, r3, #3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	4934      	ldr	r1, [pc, #208]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023e4:	f7ff fa56 	bl	8001894 <HAL_GetTick>
 80023e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ea:	e00a      	b.n	8002402 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ec:	f7ff fa52 	bl	8001894 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e04f      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002402:	4b2b      	ldr	r3, [pc, #172]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 020c 	and.w	r2, r3, #12
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	429a      	cmp	r2, r3
 8002412:	d1eb      	bne.n	80023ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002414:	4b25      	ldr	r3, [pc, #148]	; (80024ac <HAL_RCC_ClockConfig+0x1b8>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 030f 	and.w	r3, r3, #15
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	429a      	cmp	r2, r3
 8002420:	d20c      	bcs.n	800243c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002422:	4b22      	ldr	r3, [pc, #136]	; (80024ac <HAL_RCC_ClockConfig+0x1b8>)
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800242a:	4b20      	ldr	r3, [pc, #128]	; (80024ac <HAL_RCC_ClockConfig+0x1b8>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 030f 	and.w	r3, r3, #15
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	429a      	cmp	r2, r3
 8002436:	d001      	beq.n	800243c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e032      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0304 	and.w	r3, r3, #4
 8002444:	2b00      	cmp	r3, #0
 8002446:	d008      	beq.n	800245a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002448:	4b19      	ldr	r3, [pc, #100]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	4916      	ldr	r1, [pc, #88]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002456:	4313      	orrs	r3, r2
 8002458:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0308 	and.w	r3, r3, #8
 8002462:	2b00      	cmp	r3, #0
 8002464:	d009      	beq.n	800247a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002466:	4b12      	ldr	r3, [pc, #72]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	490e      	ldr	r1, [pc, #56]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002476:	4313      	orrs	r3, r2
 8002478:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800247a:	f000 f821 	bl	80024c0 <HAL_RCC_GetSysClockFreq>
 800247e:	4602      	mov	r2, r0
 8002480:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	091b      	lsrs	r3, r3, #4
 8002486:	f003 030f 	and.w	r3, r3, #15
 800248a:	490a      	ldr	r1, [pc, #40]	; (80024b4 <HAL_RCC_ClockConfig+0x1c0>)
 800248c:	5ccb      	ldrb	r3, [r1, r3]
 800248e:	fa22 f303 	lsr.w	r3, r2, r3
 8002492:	4a09      	ldr	r2, [pc, #36]	; (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002494:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002496:	4b09      	ldr	r3, [pc, #36]	; (80024bc <HAL_RCC_ClockConfig+0x1c8>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff f9b6 	bl	800180c <HAL_InitTick>

  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40023c00 	.word	0x40023c00
 80024b0:	40023800 	.word	0x40023800
 80024b4:	08002750 	.word	0x08002750
 80024b8:	20000000 	.word	0x20000000
 80024bc:	20000004 	.word	0x20000004

080024c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024c4:	b094      	sub	sp, #80	; 0x50
 80024c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024c8:	2300      	movs	r3, #0
 80024ca:	647b      	str	r3, [r7, #68]	; 0x44
 80024cc:	2300      	movs	r3, #0
 80024ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024d0:	2300      	movs	r3, #0
 80024d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024d8:	4b79      	ldr	r3, [pc, #484]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f003 030c 	and.w	r3, r3, #12
 80024e0:	2b08      	cmp	r3, #8
 80024e2:	d00d      	beq.n	8002500 <HAL_RCC_GetSysClockFreq+0x40>
 80024e4:	2b08      	cmp	r3, #8
 80024e6:	f200 80e1 	bhi.w	80026ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d002      	beq.n	80024f4 <HAL_RCC_GetSysClockFreq+0x34>
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	d003      	beq.n	80024fa <HAL_RCC_GetSysClockFreq+0x3a>
 80024f2:	e0db      	b.n	80026ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024f4:	4b73      	ldr	r3, [pc, #460]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80024f6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80024f8:	e0db      	b.n	80026b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024fa:	4b73      	ldr	r3, [pc, #460]	; (80026c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80024fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024fe:	e0d8      	b.n	80026b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002500:	4b6f      	ldr	r3, [pc, #444]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002508:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800250a:	4b6d      	ldr	r3, [pc, #436]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d063      	beq.n	80025de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002516:	4b6a      	ldr	r3, [pc, #424]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	099b      	lsrs	r3, r3, #6
 800251c:	2200      	movs	r2, #0
 800251e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002520:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002528:	633b      	str	r3, [r7, #48]	; 0x30
 800252a:	2300      	movs	r3, #0
 800252c:	637b      	str	r3, [r7, #52]	; 0x34
 800252e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002532:	4622      	mov	r2, r4
 8002534:	462b      	mov	r3, r5
 8002536:	f04f 0000 	mov.w	r0, #0
 800253a:	f04f 0100 	mov.w	r1, #0
 800253e:	0159      	lsls	r1, r3, #5
 8002540:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002544:	0150      	lsls	r0, r2, #5
 8002546:	4602      	mov	r2, r0
 8002548:	460b      	mov	r3, r1
 800254a:	4621      	mov	r1, r4
 800254c:	1a51      	subs	r1, r2, r1
 800254e:	6139      	str	r1, [r7, #16]
 8002550:	4629      	mov	r1, r5
 8002552:	eb63 0301 	sbc.w	r3, r3, r1
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	f04f 0200 	mov.w	r2, #0
 800255c:	f04f 0300 	mov.w	r3, #0
 8002560:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002564:	4659      	mov	r1, fp
 8002566:	018b      	lsls	r3, r1, #6
 8002568:	4651      	mov	r1, sl
 800256a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800256e:	4651      	mov	r1, sl
 8002570:	018a      	lsls	r2, r1, #6
 8002572:	4651      	mov	r1, sl
 8002574:	ebb2 0801 	subs.w	r8, r2, r1
 8002578:	4659      	mov	r1, fp
 800257a:	eb63 0901 	sbc.w	r9, r3, r1
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	f04f 0300 	mov.w	r3, #0
 8002586:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800258a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800258e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002592:	4690      	mov	r8, r2
 8002594:	4699      	mov	r9, r3
 8002596:	4623      	mov	r3, r4
 8002598:	eb18 0303 	adds.w	r3, r8, r3
 800259c:	60bb      	str	r3, [r7, #8]
 800259e:	462b      	mov	r3, r5
 80025a0:	eb49 0303 	adc.w	r3, r9, r3
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	f04f 0200 	mov.w	r2, #0
 80025aa:	f04f 0300 	mov.w	r3, #0
 80025ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80025b2:	4629      	mov	r1, r5
 80025b4:	024b      	lsls	r3, r1, #9
 80025b6:	4621      	mov	r1, r4
 80025b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025bc:	4621      	mov	r1, r4
 80025be:	024a      	lsls	r2, r1, #9
 80025c0:	4610      	mov	r0, r2
 80025c2:	4619      	mov	r1, r3
 80025c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025c6:	2200      	movs	r2, #0
 80025c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80025ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025d0:	f7fd fe0c 	bl	80001ec <__aeabi_uldivmod>
 80025d4:	4602      	mov	r2, r0
 80025d6:	460b      	mov	r3, r1
 80025d8:	4613      	mov	r3, r2
 80025da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025dc:	e058      	b.n	8002690 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025de:	4b38      	ldr	r3, [pc, #224]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	099b      	lsrs	r3, r3, #6
 80025e4:	2200      	movs	r2, #0
 80025e6:	4618      	mov	r0, r3
 80025e8:	4611      	mov	r1, r2
 80025ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025ee:	623b      	str	r3, [r7, #32]
 80025f0:	2300      	movs	r3, #0
 80025f2:	627b      	str	r3, [r7, #36]	; 0x24
 80025f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80025f8:	4642      	mov	r2, r8
 80025fa:	464b      	mov	r3, r9
 80025fc:	f04f 0000 	mov.w	r0, #0
 8002600:	f04f 0100 	mov.w	r1, #0
 8002604:	0159      	lsls	r1, r3, #5
 8002606:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800260a:	0150      	lsls	r0, r2, #5
 800260c:	4602      	mov	r2, r0
 800260e:	460b      	mov	r3, r1
 8002610:	4641      	mov	r1, r8
 8002612:	ebb2 0a01 	subs.w	sl, r2, r1
 8002616:	4649      	mov	r1, r9
 8002618:	eb63 0b01 	sbc.w	fp, r3, r1
 800261c:	f04f 0200 	mov.w	r2, #0
 8002620:	f04f 0300 	mov.w	r3, #0
 8002624:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002628:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800262c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002630:	ebb2 040a 	subs.w	r4, r2, sl
 8002634:	eb63 050b 	sbc.w	r5, r3, fp
 8002638:	f04f 0200 	mov.w	r2, #0
 800263c:	f04f 0300 	mov.w	r3, #0
 8002640:	00eb      	lsls	r3, r5, #3
 8002642:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002646:	00e2      	lsls	r2, r4, #3
 8002648:	4614      	mov	r4, r2
 800264a:	461d      	mov	r5, r3
 800264c:	4643      	mov	r3, r8
 800264e:	18e3      	adds	r3, r4, r3
 8002650:	603b      	str	r3, [r7, #0]
 8002652:	464b      	mov	r3, r9
 8002654:	eb45 0303 	adc.w	r3, r5, r3
 8002658:	607b      	str	r3, [r7, #4]
 800265a:	f04f 0200 	mov.w	r2, #0
 800265e:	f04f 0300 	mov.w	r3, #0
 8002662:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002666:	4629      	mov	r1, r5
 8002668:	028b      	lsls	r3, r1, #10
 800266a:	4621      	mov	r1, r4
 800266c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002670:	4621      	mov	r1, r4
 8002672:	028a      	lsls	r2, r1, #10
 8002674:	4610      	mov	r0, r2
 8002676:	4619      	mov	r1, r3
 8002678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800267a:	2200      	movs	r2, #0
 800267c:	61bb      	str	r3, [r7, #24]
 800267e:	61fa      	str	r2, [r7, #28]
 8002680:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002684:	f7fd fdb2 	bl	80001ec <__aeabi_uldivmod>
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	4613      	mov	r3, r2
 800268e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002690:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	0c1b      	lsrs	r3, r3, #16
 8002696:	f003 0303 	and.w	r3, r3, #3
 800269a:	3301      	adds	r3, #1
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80026a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026aa:	e002      	b.n	80026b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026ac:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80026ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3750      	adds	r7, #80	; 0x50
 80026b8:	46bd      	mov	sp, r7
 80026ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026be:	bf00      	nop
 80026c0:	40023800 	.word	0x40023800
 80026c4:	00f42400 	.word	0x00f42400
 80026c8:	007a1200 	.word	0x007a1200

080026cc <__libc_init_array>:
 80026cc:	b570      	push	{r4, r5, r6, lr}
 80026ce:	4d0d      	ldr	r5, [pc, #52]	; (8002704 <__libc_init_array+0x38>)
 80026d0:	4c0d      	ldr	r4, [pc, #52]	; (8002708 <__libc_init_array+0x3c>)
 80026d2:	1b64      	subs	r4, r4, r5
 80026d4:	10a4      	asrs	r4, r4, #2
 80026d6:	2600      	movs	r6, #0
 80026d8:	42a6      	cmp	r6, r4
 80026da:	d109      	bne.n	80026f0 <__libc_init_array+0x24>
 80026dc:	4d0b      	ldr	r5, [pc, #44]	; (800270c <__libc_init_array+0x40>)
 80026de:	4c0c      	ldr	r4, [pc, #48]	; (8002710 <__libc_init_array+0x44>)
 80026e0:	f000 f820 	bl	8002724 <_init>
 80026e4:	1b64      	subs	r4, r4, r5
 80026e6:	10a4      	asrs	r4, r4, #2
 80026e8:	2600      	movs	r6, #0
 80026ea:	42a6      	cmp	r6, r4
 80026ec:	d105      	bne.n	80026fa <__libc_init_array+0x2e>
 80026ee:	bd70      	pop	{r4, r5, r6, pc}
 80026f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80026f4:	4798      	blx	r3
 80026f6:	3601      	adds	r6, #1
 80026f8:	e7ee      	b.n	80026d8 <__libc_init_array+0xc>
 80026fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80026fe:	4798      	blx	r3
 8002700:	3601      	adds	r6, #1
 8002702:	e7f2      	b.n	80026ea <__libc_init_array+0x1e>
 8002704:	080027cc 	.word	0x080027cc
 8002708:	080027cc 	.word	0x080027cc
 800270c:	080027cc 	.word	0x080027cc
 8002710:	080027d0 	.word	0x080027d0

08002714 <memset>:
 8002714:	4402      	add	r2, r0
 8002716:	4603      	mov	r3, r0
 8002718:	4293      	cmp	r3, r2
 800271a:	d100      	bne.n	800271e <memset+0xa>
 800271c:	4770      	bx	lr
 800271e:	f803 1b01 	strb.w	r1, [r3], #1
 8002722:	e7f9      	b.n	8002718 <memset+0x4>

08002724 <_init>:
 8002724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002726:	bf00      	nop
 8002728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800272a:	bc08      	pop	{r3}
 800272c:	469e      	mov	lr, r3
 800272e:	4770      	bx	lr

08002730 <_fini>:
 8002730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002732:	bf00      	nop
 8002734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002736:	bc08      	pop	{r3}
 8002738:	469e      	mov	lr, r3
 800273a:	4770      	bx	lr
